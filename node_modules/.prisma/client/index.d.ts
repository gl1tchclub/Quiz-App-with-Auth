
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model Quiz
 * 
 */
export type Quiz = $Result.DefaultSelection<Prisma.$QuizPayload>
/**
 * Model UserQuestionAnswer
 * 
 */
export type UserQuestionAnswer = $Result.DefaultSelection<Prisma.$UserQuestionAnswerPayload>
/**
 * Model UserParticipateQuiz
 * 
 */
export type UserParticipateQuiz = $Result.DefaultSelection<Prisma.$UserParticipateQuizPayload>
/**
 * Model UserQuizScore
 * 
 */
export type UserQuizScore = $Result.DefaultSelection<Prisma.$UserQuizScorePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  BASIC_USER: 'BASIC_USER',
  ADMIN_USER: 'ADMIN_USER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Type: {
  multiple: 'multiple',
  boolean: 'boolean'
};

export type Type = (typeof Type)[keyof typeof Type]


export const Difficulty: {
  easy: 'easy',
  medium: 'medium',
  hard: 'hard'
};

export type Difficulty = (typeof Difficulty)[keyof typeof Difficulty]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Type = $Enums.Type

export const Type: typeof $Enums.Type

export type Difficulty = $Enums.Difficulty

export const Difficulty: typeof $Enums.Difficulty

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs>;

  /**
   * `prisma.quiz`: Exposes CRUD operations for the **Quiz** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quizzes
    * const quizzes = await prisma.quiz.findMany()
    * ```
    */
  get quiz(): Prisma.QuizDelegate<ExtArgs>;

  /**
   * `prisma.userQuestionAnswer`: Exposes CRUD operations for the **UserQuestionAnswer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserQuestionAnswers
    * const userQuestionAnswers = await prisma.userQuestionAnswer.findMany()
    * ```
    */
  get userQuestionAnswer(): Prisma.UserQuestionAnswerDelegate<ExtArgs>;

  /**
   * `prisma.userParticipateQuiz`: Exposes CRUD operations for the **UserParticipateQuiz** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserParticipateQuizs
    * const userParticipateQuizs = await prisma.userParticipateQuiz.findMany()
    * ```
    */
  get userParticipateQuiz(): Prisma.UserParticipateQuizDelegate<ExtArgs>;

  /**
   * `prisma.userQuizScore`: Exposes CRUD operations for the **UserQuizScore** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserQuizScores
    * const userQuizScores = await prisma.userQuizScore.findMany()
    * ```
    */
  get userQuizScore(): Prisma.UserQuizScoreDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.0
   * Query Engine version: 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Category: 'Category',
    Question: 'Question',
    Quiz: 'Quiz',
    UserQuestionAnswer: 'UserQuestionAnswer',
    UserParticipateQuiz: 'UserParticipateQuiz',
    UserQuizScore: 'UserQuizScore'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'category' | 'question' | 'quiz' | 'userQuestionAnswer' | 'userParticipateQuiz' | 'userQuizScore'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>,
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      Quiz: {
        payload: Prisma.$QuizPayload<ExtArgs>
        fields: Prisma.QuizFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuizFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuizPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuizFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          findFirst: {
            args: Prisma.QuizFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuizPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuizFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          findMany: {
            args: Prisma.QuizFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>[]
          }
          create: {
            args: Prisma.QuizCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          createMany: {
            args: Prisma.QuizCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuizCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>[]
          }
          delete: {
            args: Prisma.QuizDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          update: {
            args: Prisma.QuizUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          deleteMany: {
            args: Prisma.QuizDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.QuizUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.QuizUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          aggregate: {
            args: Prisma.QuizAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuiz>
          }
          groupBy: {
            args: Prisma.QuizGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuizGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuizCountArgs<ExtArgs>,
            result: $Utils.Optional<QuizCountAggregateOutputType> | number
          }
        }
      }
      UserQuestionAnswer: {
        payload: Prisma.$UserQuestionAnswerPayload<ExtArgs>
        fields: Prisma.UserQuestionAnswerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserQuestionAnswerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserQuestionAnswerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          findFirst: {
            args: Prisma.UserQuestionAnswerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserQuestionAnswerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          findMany: {
            args: Prisma.UserQuestionAnswerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>[]
          }
          create: {
            args: Prisma.UserQuestionAnswerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          createMany: {
            args: Prisma.UserQuestionAnswerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserQuestionAnswerCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>[]
          }
          delete: {
            args: Prisma.UserQuestionAnswerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          update: {
            args: Prisma.UserQuestionAnswerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          deleteMany: {
            args: Prisma.UserQuestionAnswerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserQuestionAnswerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserQuestionAnswerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuestionAnswerPayload>
          }
          aggregate: {
            args: Prisma.UserQuestionAnswerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserQuestionAnswer>
          }
          groupBy: {
            args: Prisma.UserQuestionAnswerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserQuestionAnswerGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserQuestionAnswerCountArgs<ExtArgs>,
            result: $Utils.Optional<UserQuestionAnswerCountAggregateOutputType> | number
          }
        }
      }
      UserParticipateQuiz: {
        payload: Prisma.$UserParticipateQuizPayload<ExtArgs>
        fields: Prisma.UserParticipateQuizFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserParticipateQuizFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserParticipateQuizPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserParticipateQuizFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserParticipateQuizPayload>
          }
          findFirst: {
            args: Prisma.UserParticipateQuizFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserParticipateQuizPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserParticipateQuizFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserParticipateQuizPayload>
          }
          findMany: {
            args: Prisma.UserParticipateQuizFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserParticipateQuizPayload>[]
          }
          create: {
            args: Prisma.UserParticipateQuizCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserParticipateQuizPayload>
          }
          createMany: {
            args: Prisma.UserParticipateQuizCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserParticipateQuizCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserParticipateQuizPayload>[]
          }
          delete: {
            args: Prisma.UserParticipateQuizDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserParticipateQuizPayload>
          }
          update: {
            args: Prisma.UserParticipateQuizUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserParticipateQuizPayload>
          }
          deleteMany: {
            args: Prisma.UserParticipateQuizDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserParticipateQuizUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserParticipateQuizUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserParticipateQuizPayload>
          }
          aggregate: {
            args: Prisma.UserParticipateQuizAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserParticipateQuiz>
          }
          groupBy: {
            args: Prisma.UserParticipateQuizGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserParticipateQuizGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserParticipateQuizCountArgs<ExtArgs>,
            result: $Utils.Optional<UserParticipateQuizCountAggregateOutputType> | number
          }
        }
      }
      UserQuizScore: {
        payload: Prisma.$UserQuizScorePayload<ExtArgs>
        fields: Prisma.UserQuizScoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserQuizScoreFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuizScorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserQuizScoreFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuizScorePayload>
          }
          findFirst: {
            args: Prisma.UserQuizScoreFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuizScorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserQuizScoreFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuizScorePayload>
          }
          findMany: {
            args: Prisma.UserQuizScoreFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuizScorePayload>[]
          }
          create: {
            args: Prisma.UserQuizScoreCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuizScorePayload>
          }
          createMany: {
            args: Prisma.UserQuizScoreCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserQuizScoreCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuizScorePayload>[]
          }
          delete: {
            args: Prisma.UserQuizScoreDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuizScorePayload>
          }
          update: {
            args: Prisma.UserQuizScoreUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuizScorePayload>
          }
          deleteMany: {
            args: Prisma.UserQuizScoreDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserQuizScoreUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserQuizScoreUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserQuizScorePayload>
          }
          aggregate: {
            args: Prisma.UserQuizScoreAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserQuizScore>
          }
          groupBy: {
            args: Prisma.UserQuizScoreGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserQuizScoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserQuizScoreCountArgs<ExtArgs>,
            result: $Utils.Optional<UserQuizScoreCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    UserQuestionAnswer: number
    UserParticipateQuiz: number
    UserQuizScore: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    UserQuestionAnswer?: boolean | UserCountOutputTypeCountUserQuestionAnswerArgs
    UserParticipateQuiz?: boolean | UserCountOutputTypeCountUserParticipateQuizArgs
    UserQuizScore?: boolean | UserCountOutputTypeCountUserQuizScoreArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserQuestionAnswerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionAnswerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserParticipateQuizArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserParticipateQuizWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserQuizScoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuizScoreWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    quizzes: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quizzes?: boolean | CategoryCountOutputTypeCountQuizzesArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizWhereInput
  }


  /**
   * Count Type QuestionCountOutputType
   */

  export type QuestionCountOutputType = {
    userQuestionAnswers: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userQuestionAnswers?: boolean | QuestionCountOutputTypeCountUserQuestionAnswersArgs
  }

  // Custom InputTypes
  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountUserQuestionAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionAnswerWhereInput
  }


  /**
   * Count Type QuizCountOutputType
   */

  export type QuizCountOutputType = {
    questions: number
    userQuestionAnswers: number
    userParticipateQuizzes: number
    userQuizScores: number
  }

  export type QuizCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | QuizCountOutputTypeCountQuestionsArgs
    userQuestionAnswers?: boolean | QuizCountOutputTypeCountUserQuestionAnswersArgs
    userParticipateQuizzes?: boolean | QuizCountOutputTypeCountUserParticipateQuizzesArgs
    userQuizScores?: boolean | QuizCountOutputTypeCountUserQuizScoresArgs
  }

  // Custom InputTypes
  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizCountOutputType
     */
    select?: QuizCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }

  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeCountUserQuestionAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionAnswerWhereInput
  }

  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeCountUserParticipateQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserParticipateQuizWhereInput
  }

  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeCountUserQuizScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuizScoreWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    username: string | null
    password: string | null
    avatar: string | null
    createdAt: Date | null
    role: $Enums.Role | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    username: string | null
    password: string | null
    avatar: string | null
    createdAt: Date | null
    role: $Enums.Role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    firstName: number
    lastName: number
    username: number
    password: number
    avatar: number
    createdAt: number
    role: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    username?: true
    password?: true
    avatar?: true
    createdAt?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    username?: true
    password?: true
    avatar?: true
    createdAt?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    username?: true
    password?: true
    avatar?: true
    createdAt?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    firstName: string
    lastName: string
    username: string
    password: string
    avatar: string
    createdAt: Date
    role: $Enums.Role
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    password?: boolean
    avatar?: boolean
    createdAt?: boolean
    role?: boolean
    UserQuestionAnswer?: boolean | User$UserQuestionAnswerArgs<ExtArgs>
    UserParticipateQuiz?: boolean | User$UserParticipateQuizArgs<ExtArgs>
    UserQuizScore?: boolean | User$UserQuizScoreArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    password?: boolean
    avatar?: boolean
    createdAt?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    password?: boolean
    avatar?: boolean
    createdAt?: boolean
    role?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    UserQuestionAnswer?: boolean | User$UserQuestionAnswerArgs<ExtArgs>
    UserParticipateQuiz?: boolean | User$UserParticipateQuizArgs<ExtArgs>
    UserQuizScore?: boolean | User$UserQuizScoreArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      UserQuestionAnswer: Prisma.$UserQuestionAnswerPayload<ExtArgs>[]
      UserParticipateQuiz: Prisma.$UserParticipateQuizPayload<ExtArgs>[]
      UserQuizScore: Prisma.$UserQuizScorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      firstName: string
      lastName: string
      username: string
      password: string
      avatar: string
      createdAt: Date
      role: $Enums.Role
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    UserQuestionAnswer<T extends User$UserQuestionAnswerArgs<ExtArgs> = {}>(args?: Subset<T, User$UserQuestionAnswerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, 'findMany'> | Null>;

    UserParticipateQuiz<T extends User$UserParticipateQuizArgs<ExtArgs> = {}>(args?: Subset<T, User$UserParticipateQuizArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserParticipateQuizPayload<ExtArgs>, T, 'findMany'> | Null>;

    UserQuizScore<T extends User$UserQuizScoreArgs<ExtArgs> = {}>(args?: Subset<T, User$UserQuizScoreArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuizScorePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly role: FieldRef<"User", 'Role'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.UserQuestionAnswer
   */
  export type User$UserQuestionAnswerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    where?: UserQuestionAnswerWhereInput
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    cursor?: UserQuestionAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * User.UserParticipateQuiz
   */
  export type User$UserParticipateQuizArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserParticipateQuiz
     */
    select?: UserParticipateQuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserParticipateQuizInclude<ExtArgs> | null
    where?: UserParticipateQuizWhereInput
    orderBy?: UserParticipateQuizOrderByWithRelationInput | UserParticipateQuizOrderByWithRelationInput[]
    cursor?: UserParticipateQuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserParticipateQuizScalarFieldEnum | UserParticipateQuizScalarFieldEnum[]
  }

  /**
   * User.UserQuizScore
   */
  export type User$UserQuizScoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuizScore
     */
    select?: UserQuizScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuizScoreInclude<ExtArgs> | null
    where?: UserQuizScoreWhereInput
    orderBy?: UserQuizScoreOrderByWithRelationInput | UserQuizScoreOrderByWithRelationInput[]
    cursor?: UserQuizScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserQuizScoreScalarFieldEnum | UserQuizScoreScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    quizzes?: boolean | Category$quizzesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quizzes?: boolean | Category$quizzesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      quizzes: Prisma.$QuizPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    quizzes<T extends Category$quizzesArgs<ExtArgs> = {}>(args?: Subset<T, Category$quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.quizzes
   */
  export type Category$quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    where?: QuizWhereInput
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    cursor?: QuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    id: number | null
    quizId: number | null
  }

  export type QuestionSumAggregateOutputType = {
    id: number | null
    quizId: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: number | null
    quizId: number | null
    question: string | null
    correctAnswer: string | null
    createdAt: Date | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: number | null
    quizId: number | null
    question: string | null
    correctAnswer: string | null
    createdAt: Date | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    quizId: number
    question: number
    correctAnswer: number
    incorrectAnswers: number
    createdAt: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    id?: true
    quizId?: true
  }

  export type QuestionSumAggregateInputType = {
    id?: true
    quizId?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    quizId?: true
    question?: true
    correctAnswer?: true
    createdAt?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    quizId?: true
    question?: true
    correctAnswer?: true
    createdAt?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    quizId?: true
    question?: true
    correctAnswer?: true
    incorrectAnswers?: true
    createdAt?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: number
    quizId: number | null
    question: string
    correctAnswer: string
    incorrectAnswers: string[]
    createdAt: Date
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quizId?: boolean
    question?: boolean
    correctAnswer?: boolean
    incorrectAnswers?: boolean
    createdAt?: boolean
    userQuestionAnswers?: boolean | Question$userQuestionAnswersArgs<ExtArgs>
    quiz?: boolean | Question$quizArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quizId?: boolean
    question?: boolean
    correctAnswer?: boolean
    incorrectAnswers?: boolean
    createdAt?: boolean
    quiz?: boolean | Question$quizArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    id?: boolean
    quizId?: boolean
    question?: boolean
    correctAnswer?: boolean
    incorrectAnswers?: boolean
    createdAt?: boolean
  }

  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userQuestionAnswers?: boolean | Question$userQuestionAnswersArgs<ExtArgs>
    quiz?: boolean | Question$quizArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quiz?: boolean | Question$quizArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      userQuestionAnswers: Prisma.$UserQuestionAnswerPayload<ExtArgs>[]
      quiz: Prisma.$QuizPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      quizId: number | null
      question: string
      correctAnswer: string
      incorrectAnswers: string[]
      createdAt: Date
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends QuestionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends QuestionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends QuestionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
    **/
    create<T extends QuestionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends QuestionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {QuestionCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends QuestionCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
    **/
    delete<T extends QuestionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends QuestionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends QuestionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends QuestionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
    **/
    upsert<T extends QuestionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>
    ): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    userQuestionAnswers<T extends Question$userQuestionAnswersArgs<ExtArgs> = {}>(args?: Subset<T, Question$userQuestionAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, 'findMany'> | Null>;

    quiz<T extends Question$quizArgs<ExtArgs> = {}>(args?: Subset<T, Question$quizArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Question model
   */ 
  interface QuestionFieldRefs {
    readonly id: FieldRef<"Question", 'Int'>
    readonly quizId: FieldRef<"Question", 'Int'>
    readonly question: FieldRef<"Question", 'String'>
    readonly correctAnswer: FieldRef<"Question", 'String'>
    readonly incorrectAnswers: FieldRef<"Question", 'String[]'>
    readonly createdAt: FieldRef<"Question", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question createManyAndReturn
   */
  export type QuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
  }

  /**
   * Question.userQuestionAnswers
   */
  export type Question$userQuestionAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    where?: UserQuestionAnswerWhereInput
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    cursor?: UserQuestionAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * Question.quiz
   */
  export type Question$quizArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    where?: QuizWhereInput
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model Quiz
   */

  export type AggregateQuiz = {
    _count: QuizCountAggregateOutputType | null
    _avg: QuizAvgAggregateOutputType | null
    _sum: QuizSumAggregateOutputType | null
    _min: QuizMinAggregateOutputType | null
    _max: QuizMaxAggregateOutputType | null
  }

  export type QuizAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type QuizSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type QuizMinAggregateOutputType = {
    id: number | null
    categoryId: number | null
    name: string | null
    type: $Enums.Type | null
    difficulty: $Enums.Difficulty | null
    startDate: string | null
    endDate: string | null
    createdAt: Date | null
  }

  export type QuizMaxAggregateOutputType = {
    id: number | null
    categoryId: number | null
    name: string | null
    type: $Enums.Type | null
    difficulty: $Enums.Difficulty | null
    startDate: string | null
    endDate: string | null
    createdAt: Date | null
  }

  export type QuizCountAggregateOutputType = {
    id: number
    categoryId: number
    name: number
    type: number
    difficulty: number
    startDate: number
    endDate: number
    createdAt: number
    _all: number
  }


  export type QuizAvgAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type QuizSumAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type QuizMinAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    type?: true
    difficulty?: true
    startDate?: true
    endDate?: true
    createdAt?: true
  }

  export type QuizMaxAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    type?: true
    difficulty?: true
    startDate?: true
    endDate?: true
    createdAt?: true
  }

  export type QuizCountAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    type?: true
    difficulty?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    _all?: true
  }

  export type QuizAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quiz to aggregate.
     */
    where?: QuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Quizzes
    **/
    _count?: true | QuizCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuizAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuizSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuizMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuizMaxAggregateInputType
  }

  export type GetQuizAggregateType<T extends QuizAggregateArgs> = {
        [P in keyof T & keyof AggregateQuiz]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuiz[P]>
      : GetScalarType<T[P], AggregateQuiz[P]>
  }




  export type QuizGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizWhereInput
    orderBy?: QuizOrderByWithAggregationInput | QuizOrderByWithAggregationInput[]
    by: QuizScalarFieldEnum[] | QuizScalarFieldEnum
    having?: QuizScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuizCountAggregateInputType | true
    _avg?: QuizAvgAggregateInputType
    _sum?: QuizSumAggregateInputType
    _min?: QuizMinAggregateInputType
    _max?: QuizMaxAggregateInputType
  }

  export type QuizGroupByOutputType = {
    id: number
    categoryId: number
    name: string
    type: $Enums.Type
    difficulty: $Enums.Difficulty
    startDate: string
    endDate: string
    createdAt: Date
    _count: QuizCountAggregateOutputType | null
    _avg: QuizAvgAggregateOutputType | null
    _sum: QuizSumAggregateOutputType | null
    _min: QuizMinAggregateOutputType | null
    _max: QuizMaxAggregateOutputType | null
  }

  type GetQuizGroupByPayload<T extends QuizGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuizGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuizGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuizGroupByOutputType[P]>
            : GetScalarType<T[P], QuizGroupByOutputType[P]>
        }
      >
    >


  export type QuizSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    name?: boolean
    type?: boolean
    difficulty?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    questions?: boolean | Quiz$questionsArgs<ExtArgs>
    userQuestionAnswers?: boolean | Quiz$userQuestionAnswersArgs<ExtArgs>
    userParticipateQuizzes?: boolean | Quiz$userParticipateQuizzesArgs<ExtArgs>
    userQuizScores?: boolean | Quiz$userQuizScoresArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    _count?: boolean | QuizCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quiz"]>

  export type QuizSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    name?: boolean
    type?: boolean
    difficulty?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quiz"]>

  export type QuizSelectScalar = {
    id?: boolean
    categoryId?: boolean
    name?: boolean
    type?: boolean
    difficulty?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
  }

  export type QuizInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | Quiz$questionsArgs<ExtArgs>
    userQuestionAnswers?: boolean | Quiz$userQuestionAnswersArgs<ExtArgs>
    userParticipateQuizzes?: boolean | Quiz$userParticipateQuizzesArgs<ExtArgs>
    userQuizScores?: boolean | Quiz$userQuizScoresArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    _count?: boolean | QuizCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuizIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $QuizPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Quiz"
    objects: {
      questions: Prisma.$QuestionPayload<ExtArgs>[]
      userQuestionAnswers: Prisma.$UserQuestionAnswerPayload<ExtArgs>[]
      userParticipateQuizzes: Prisma.$UserParticipateQuizPayload<ExtArgs>[]
      userQuizScores: Prisma.$UserQuizScorePayload<ExtArgs>[]
      category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoryId: number
      name: string
      type: $Enums.Type
      difficulty: $Enums.Difficulty
      startDate: string
      endDate: string
      createdAt: Date
    }, ExtArgs["result"]["quiz"]>
    composites: {}
  }

  type QuizGetPayload<S extends boolean | null | undefined | QuizDefaultArgs> = $Result.GetResult<Prisma.$QuizPayload, S>

  type QuizCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuizFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuizCountAggregateInputType | true
    }

  export interface QuizDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Quiz'], meta: { name: 'Quiz' } }
    /**
     * Find zero or one Quiz that matches the filter.
     * @param {QuizFindUniqueArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends QuizFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, QuizFindUniqueArgs<ExtArgs>>
    ): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Quiz that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QuizFindUniqueOrThrowArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends QuizFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Quiz that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizFindFirstArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends QuizFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizFindFirstArgs<ExtArgs>>
    ): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Quiz that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizFindFirstOrThrowArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends QuizFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quizzes
     * const quizzes = await prisma.quiz.findMany()
     * 
     * // Get first 10 Quizzes
     * const quizzes = await prisma.quiz.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quizWithIdOnly = await prisma.quiz.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends QuizFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Quiz.
     * @param {QuizCreateArgs} args - Arguments to create a Quiz.
     * @example
     * // Create one Quiz
     * const Quiz = await prisma.quiz.create({
     *   data: {
     *     // ... data to create a Quiz
     *   }
     * })
     * 
    **/
    create<T extends QuizCreateArgs<ExtArgs>>(
      args: SelectSubset<T, QuizCreateArgs<ExtArgs>>
    ): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Quizzes.
     * @param {QuizCreateManyArgs} args - Arguments to create many Quizzes.
     * @example
     * // Create many Quizzes
     * const quiz = await prisma.quiz.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends QuizCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Quizzes and returns the data saved in the database.
     * @param {QuizCreateManyAndReturnArgs} args - Arguments to create many Quizzes.
     * @example
     * // Create many Quizzes
     * const quiz = await prisma.quiz.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Quizzes and only return the `id`
     * const quizWithIdOnly = await prisma.quiz.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends QuizCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Quiz.
     * @param {QuizDeleteArgs} args - Arguments to delete one Quiz.
     * @example
     * // Delete one Quiz
     * const Quiz = await prisma.quiz.delete({
     *   where: {
     *     // ... filter to delete one Quiz
     *   }
     * })
     * 
    **/
    delete<T extends QuizDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, QuizDeleteArgs<ExtArgs>>
    ): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Quiz.
     * @param {QuizUpdateArgs} args - Arguments to update one Quiz.
     * @example
     * // Update one Quiz
     * const quiz = await prisma.quiz.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends QuizUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, QuizUpdateArgs<ExtArgs>>
    ): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Quizzes.
     * @param {QuizDeleteManyArgs} args - Arguments to filter Quizzes to delete.
     * @example
     * // Delete a few Quizzes
     * const { count } = await prisma.quiz.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends QuizDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuizDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quizzes
     * const quiz = await prisma.quiz.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends QuizUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, QuizUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Quiz.
     * @param {QuizUpsertArgs} args - Arguments to update or create a Quiz.
     * @example
     * // Update or create a Quiz
     * const quiz = await prisma.quiz.upsert({
     *   create: {
     *     // ... data to create a Quiz
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quiz we want to update
     *   }
     * })
    **/
    upsert<T extends QuizUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, QuizUpsertArgs<ExtArgs>>
    ): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizCountArgs} args - Arguments to filter Quizzes to count.
     * @example
     * // Count the number of Quizzes
     * const count = await prisma.quiz.count({
     *   where: {
     *     // ... the filter for the Quizzes we want to count
     *   }
     * })
    **/
    count<T extends QuizCountArgs>(
      args?: Subset<T, QuizCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuizCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuizAggregateArgs>(args: Subset<T, QuizAggregateArgs>): Prisma.PrismaPromise<GetQuizAggregateType<T>>

    /**
     * Group by Quiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuizGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuizGroupByArgs['orderBy'] }
        : { orderBy?: QuizGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuizGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Quiz model
   */
  readonly fields: QuizFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Quiz.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuizClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    questions<T extends Quiz$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Quiz$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'findMany'> | Null>;

    userQuestionAnswers<T extends Quiz$userQuestionAnswersArgs<ExtArgs> = {}>(args?: Subset<T, Quiz$userQuestionAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, 'findMany'> | Null>;

    userParticipateQuizzes<T extends Quiz$userParticipateQuizzesArgs<ExtArgs> = {}>(args?: Subset<T, Quiz$userParticipateQuizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserParticipateQuizPayload<ExtArgs>, T, 'findMany'> | Null>;

    userQuizScores<T extends Quiz$userQuizScoresArgs<ExtArgs> = {}>(args?: Subset<T, Quiz$userQuizScoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuizScorePayload<ExtArgs>, T, 'findMany'> | Null>;

    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Quiz model
   */ 
  interface QuizFieldRefs {
    readonly id: FieldRef<"Quiz", 'Int'>
    readonly categoryId: FieldRef<"Quiz", 'Int'>
    readonly name: FieldRef<"Quiz", 'String'>
    readonly type: FieldRef<"Quiz", 'Type'>
    readonly difficulty: FieldRef<"Quiz", 'Difficulty'>
    readonly startDate: FieldRef<"Quiz", 'String'>
    readonly endDate: FieldRef<"Quiz", 'String'>
    readonly createdAt: FieldRef<"Quiz", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Quiz findUnique
   */
  export type QuizFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quiz to fetch.
     */
    where: QuizWhereUniqueInput
  }

  /**
   * Quiz findUniqueOrThrow
   */
  export type QuizFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quiz to fetch.
     */
    where: QuizWhereUniqueInput
  }

  /**
   * Quiz findFirst
   */
  export type QuizFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quiz to fetch.
     */
    where?: QuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quizzes.
     */
    cursor?: QuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quizzes.
     */
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }

  /**
   * Quiz findFirstOrThrow
   */
  export type QuizFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quiz to fetch.
     */
    where?: QuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quizzes.
     */
    cursor?: QuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quizzes.
     */
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }

  /**
   * Quiz findMany
   */
  export type QuizFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quizzes to fetch.
     */
    where?: QuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Quizzes.
     */
    cursor?: QuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }

  /**
   * Quiz create
   */
  export type QuizCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * The data needed to create a Quiz.
     */
    data: XOR<QuizCreateInput, QuizUncheckedCreateInput>
  }

  /**
   * Quiz createMany
   */
  export type QuizCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Quizzes.
     */
    data: QuizCreateManyInput | QuizCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Quiz createManyAndReturn
   */
  export type QuizCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Quizzes.
     */
    data: QuizCreateManyInput | QuizCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Quiz update
   */
  export type QuizUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * The data needed to update a Quiz.
     */
    data: XOR<QuizUpdateInput, QuizUncheckedUpdateInput>
    /**
     * Choose, which Quiz to update.
     */
    where: QuizWhereUniqueInput
  }

  /**
   * Quiz updateMany
   */
  export type QuizUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Quizzes.
     */
    data: XOR<QuizUpdateManyMutationInput, QuizUncheckedUpdateManyInput>
    /**
     * Filter which Quizzes to update
     */
    where?: QuizWhereInput
  }

  /**
   * Quiz upsert
   */
  export type QuizUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * The filter to search for the Quiz to update in case it exists.
     */
    where: QuizWhereUniqueInput
    /**
     * In case the Quiz found by the `where` argument doesn't exist, create a new Quiz with this data.
     */
    create: XOR<QuizCreateInput, QuizUncheckedCreateInput>
    /**
     * In case the Quiz was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuizUpdateInput, QuizUncheckedUpdateInput>
  }

  /**
   * Quiz delete
   */
  export type QuizDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter which Quiz to delete.
     */
    where: QuizWhereUniqueInput
  }

  /**
   * Quiz deleteMany
   */
  export type QuizDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quizzes to delete
     */
    where?: QuizWhereInput
  }

  /**
   * Quiz.questions
   */
  export type Quiz$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Quiz.userQuestionAnswers
   */
  export type Quiz$userQuestionAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    where?: UserQuestionAnswerWhereInput
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    cursor?: UserQuestionAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * Quiz.userParticipateQuizzes
   */
  export type Quiz$userParticipateQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserParticipateQuiz
     */
    select?: UserParticipateQuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserParticipateQuizInclude<ExtArgs> | null
    where?: UserParticipateQuizWhereInput
    orderBy?: UserParticipateQuizOrderByWithRelationInput | UserParticipateQuizOrderByWithRelationInput[]
    cursor?: UserParticipateQuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserParticipateQuizScalarFieldEnum | UserParticipateQuizScalarFieldEnum[]
  }

  /**
   * Quiz.userQuizScores
   */
  export type Quiz$userQuizScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuizScore
     */
    select?: UserQuizScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuizScoreInclude<ExtArgs> | null
    where?: UserQuizScoreWhereInput
    orderBy?: UserQuizScoreOrderByWithRelationInput | UserQuizScoreOrderByWithRelationInput[]
    cursor?: UserQuizScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserQuizScoreScalarFieldEnum | UserQuizScoreScalarFieldEnum[]
  }

  /**
   * Quiz without action
   */
  export type QuizDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
  }


  /**
   * Model UserQuestionAnswer
   */

  export type AggregateUserQuestionAnswer = {
    _count: UserQuestionAnswerCountAggregateOutputType | null
    _avg: UserQuestionAnswerAvgAggregateOutputType | null
    _sum: UserQuestionAnswerSumAggregateOutputType | null
    _min: UserQuestionAnswerMinAggregateOutputType | null
    _max: UserQuestionAnswerMaxAggregateOutputType | null
  }

  export type UserQuestionAnswerAvgAggregateOutputType = {
    id: number | null
    quizId: number | null
    questionId: number | null
  }

  export type UserQuestionAnswerSumAggregateOutputType = {
    id: number | null
    quizId: number | null
    questionId: number | null
  }

  export type UserQuestionAnswerMinAggregateOutputType = {
    id: number | null
    userId: string | null
    quizId: number | null
    questionId: number | null
    answer: string | null
    isCorrect: boolean | null
    createdAt: Date | null
  }

  export type UserQuestionAnswerMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    quizId: number | null
    questionId: number | null
    answer: string | null
    isCorrect: boolean | null
    createdAt: Date | null
  }

  export type UserQuestionAnswerCountAggregateOutputType = {
    id: number
    userId: number
    quizId: number
    questionId: number
    answer: number
    isCorrect: number
    createdAt: number
    _all: number
  }


  export type UserQuestionAnswerAvgAggregateInputType = {
    id?: true
    quizId?: true
    questionId?: true
  }

  export type UserQuestionAnswerSumAggregateInputType = {
    id?: true
    quizId?: true
    questionId?: true
  }

  export type UserQuestionAnswerMinAggregateInputType = {
    id?: true
    userId?: true
    quizId?: true
    questionId?: true
    answer?: true
    isCorrect?: true
    createdAt?: true
  }

  export type UserQuestionAnswerMaxAggregateInputType = {
    id?: true
    userId?: true
    quizId?: true
    questionId?: true
    answer?: true
    isCorrect?: true
    createdAt?: true
  }

  export type UserQuestionAnswerCountAggregateInputType = {
    id?: true
    userId?: true
    quizId?: true
    questionId?: true
    answer?: true
    isCorrect?: true
    createdAt?: true
    _all?: true
  }

  export type UserQuestionAnswerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserQuestionAnswer to aggregate.
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuestionAnswers to fetch.
     */
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserQuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserQuestionAnswers
    **/
    _count?: true | UserQuestionAnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserQuestionAnswerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserQuestionAnswerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserQuestionAnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserQuestionAnswerMaxAggregateInputType
  }

  export type GetUserQuestionAnswerAggregateType<T extends UserQuestionAnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateUserQuestionAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserQuestionAnswer[P]>
      : GetScalarType<T[P], AggregateUserQuestionAnswer[P]>
  }




  export type UserQuestionAnswerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuestionAnswerWhereInput
    orderBy?: UserQuestionAnswerOrderByWithAggregationInput | UserQuestionAnswerOrderByWithAggregationInput[]
    by: UserQuestionAnswerScalarFieldEnum[] | UserQuestionAnswerScalarFieldEnum
    having?: UserQuestionAnswerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserQuestionAnswerCountAggregateInputType | true
    _avg?: UserQuestionAnswerAvgAggregateInputType
    _sum?: UserQuestionAnswerSumAggregateInputType
    _min?: UserQuestionAnswerMinAggregateInputType
    _max?: UserQuestionAnswerMaxAggregateInputType
  }

  export type UserQuestionAnswerGroupByOutputType = {
    id: number
    userId: string
    quizId: number
    questionId: number
    answer: string
    isCorrect: boolean
    createdAt: Date
    _count: UserQuestionAnswerCountAggregateOutputType | null
    _avg: UserQuestionAnswerAvgAggregateOutputType | null
    _sum: UserQuestionAnswerSumAggregateOutputType | null
    _min: UserQuestionAnswerMinAggregateOutputType | null
    _max: UserQuestionAnswerMaxAggregateOutputType | null
  }

  type GetUserQuestionAnswerGroupByPayload<T extends UserQuestionAnswerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserQuestionAnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserQuestionAnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserQuestionAnswerGroupByOutputType[P]>
            : GetScalarType<T[P], UserQuestionAnswerGroupByOutputType[P]>
        }
      >
    >


  export type UserQuestionAnswerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    quizId?: boolean
    questionId?: boolean
    answer?: boolean
    isCorrect?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userQuestionAnswer"]>

  export type UserQuestionAnswerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    quizId?: boolean
    questionId?: boolean
    answer?: boolean
    isCorrect?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userQuestionAnswer"]>

  export type UserQuestionAnswerSelectScalar = {
    id?: boolean
    userId?: boolean
    quizId?: boolean
    questionId?: boolean
    answer?: boolean
    isCorrect?: boolean
    createdAt?: boolean
  }

  export type UserQuestionAnswerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }
  export type UserQuestionAnswerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }

  export type $UserQuestionAnswerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserQuestionAnswer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      quiz: Prisma.$QuizPayload<ExtArgs>
      question: Prisma.$QuestionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      quizId: number
      questionId: number
      answer: string
      isCorrect: boolean
      createdAt: Date
    }, ExtArgs["result"]["userQuestionAnswer"]>
    composites: {}
  }

  type UserQuestionAnswerGetPayload<S extends boolean | null | undefined | UserQuestionAnswerDefaultArgs> = $Result.GetResult<Prisma.$UserQuestionAnswerPayload, S>

  type UserQuestionAnswerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserQuestionAnswerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserQuestionAnswerCountAggregateInputType | true
    }

  export interface UserQuestionAnswerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserQuestionAnswer'], meta: { name: 'UserQuestionAnswer' } }
    /**
     * Find zero or one UserQuestionAnswer that matches the filter.
     * @param {UserQuestionAnswerFindUniqueArgs} args - Arguments to find a UserQuestionAnswer
     * @example
     * // Get one UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserQuestionAnswerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserQuestionAnswerFindUniqueArgs<ExtArgs>>
    ): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserQuestionAnswer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserQuestionAnswerFindUniqueOrThrowArgs} args - Arguments to find a UserQuestionAnswer
     * @example
     * // Get one UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserQuestionAnswerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserQuestionAnswerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserQuestionAnswer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerFindFirstArgs} args - Arguments to find a UserQuestionAnswer
     * @example
     * // Get one UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserQuestionAnswerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserQuestionAnswerFindFirstArgs<ExtArgs>>
    ): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserQuestionAnswer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerFindFirstOrThrowArgs} args - Arguments to find a UserQuestionAnswer
     * @example
     * // Get one UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserQuestionAnswerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserQuestionAnswerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserQuestionAnswers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserQuestionAnswers
     * const userQuestionAnswers = await prisma.userQuestionAnswer.findMany()
     * 
     * // Get first 10 UserQuestionAnswers
     * const userQuestionAnswers = await prisma.userQuestionAnswer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userQuestionAnswerWithIdOnly = await prisma.userQuestionAnswer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserQuestionAnswerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserQuestionAnswerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserQuestionAnswer.
     * @param {UserQuestionAnswerCreateArgs} args - Arguments to create a UserQuestionAnswer.
     * @example
     * // Create one UserQuestionAnswer
     * const UserQuestionAnswer = await prisma.userQuestionAnswer.create({
     *   data: {
     *     // ... data to create a UserQuestionAnswer
     *   }
     * })
     * 
    **/
    create<T extends UserQuestionAnswerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserQuestionAnswerCreateArgs<ExtArgs>>
    ): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserQuestionAnswers.
     * @param {UserQuestionAnswerCreateManyArgs} args - Arguments to create many UserQuestionAnswers.
     * @example
     * // Create many UserQuestionAnswers
     * const userQuestionAnswer = await prisma.userQuestionAnswer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserQuestionAnswerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserQuestionAnswerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserQuestionAnswers and returns the data saved in the database.
     * @param {UserQuestionAnswerCreateManyAndReturnArgs} args - Arguments to create many UserQuestionAnswers.
     * @example
     * // Create many UserQuestionAnswers
     * const userQuestionAnswer = await prisma.userQuestionAnswer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserQuestionAnswers and only return the `id`
     * const userQuestionAnswerWithIdOnly = await prisma.userQuestionAnswer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserQuestionAnswerCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserQuestionAnswerCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a UserQuestionAnswer.
     * @param {UserQuestionAnswerDeleteArgs} args - Arguments to delete one UserQuestionAnswer.
     * @example
     * // Delete one UserQuestionAnswer
     * const UserQuestionAnswer = await prisma.userQuestionAnswer.delete({
     *   where: {
     *     // ... filter to delete one UserQuestionAnswer
     *   }
     * })
     * 
    **/
    delete<T extends UserQuestionAnswerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserQuestionAnswerDeleteArgs<ExtArgs>>
    ): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserQuestionAnswer.
     * @param {UserQuestionAnswerUpdateArgs} args - Arguments to update one UserQuestionAnswer.
     * @example
     * // Update one UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserQuestionAnswerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserQuestionAnswerUpdateArgs<ExtArgs>>
    ): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserQuestionAnswers.
     * @param {UserQuestionAnswerDeleteManyArgs} args - Arguments to filter UserQuestionAnswers to delete.
     * @example
     * // Delete a few UserQuestionAnswers
     * const { count } = await prisma.userQuestionAnswer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserQuestionAnswerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserQuestionAnswerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserQuestionAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserQuestionAnswers
     * const userQuestionAnswer = await prisma.userQuestionAnswer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserQuestionAnswerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserQuestionAnswerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserQuestionAnswer.
     * @param {UserQuestionAnswerUpsertArgs} args - Arguments to update or create a UserQuestionAnswer.
     * @example
     * // Update or create a UserQuestionAnswer
     * const userQuestionAnswer = await prisma.userQuestionAnswer.upsert({
     *   create: {
     *     // ... data to create a UserQuestionAnswer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserQuestionAnswer we want to update
     *   }
     * })
    **/
    upsert<T extends UserQuestionAnswerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserQuestionAnswerUpsertArgs<ExtArgs>>
    ): Prisma__UserQuestionAnswerClient<$Result.GetResult<Prisma.$UserQuestionAnswerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserQuestionAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerCountArgs} args - Arguments to filter UserQuestionAnswers to count.
     * @example
     * // Count the number of UserQuestionAnswers
     * const count = await prisma.userQuestionAnswer.count({
     *   where: {
     *     // ... the filter for the UserQuestionAnswers we want to count
     *   }
     * })
    **/
    count<T extends UserQuestionAnswerCountArgs>(
      args?: Subset<T, UserQuestionAnswerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserQuestionAnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserQuestionAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserQuestionAnswerAggregateArgs>(args: Subset<T, UserQuestionAnswerAggregateArgs>): Prisma.PrismaPromise<GetUserQuestionAnswerAggregateType<T>>

    /**
     * Group by UserQuestionAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuestionAnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserQuestionAnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserQuestionAnswerGroupByArgs['orderBy'] }
        : { orderBy?: UserQuestionAnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserQuestionAnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserQuestionAnswerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserQuestionAnswer model
   */
  readonly fields: UserQuestionAnswerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserQuestionAnswer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserQuestionAnswerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    quiz<T extends QuizDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuizDefaultArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserQuestionAnswer model
   */ 
  interface UserQuestionAnswerFieldRefs {
    readonly id: FieldRef<"UserQuestionAnswer", 'Int'>
    readonly userId: FieldRef<"UserQuestionAnswer", 'String'>
    readonly quizId: FieldRef<"UserQuestionAnswer", 'Int'>
    readonly questionId: FieldRef<"UserQuestionAnswer", 'Int'>
    readonly answer: FieldRef<"UserQuestionAnswer", 'String'>
    readonly isCorrect: FieldRef<"UserQuestionAnswer", 'Boolean'>
    readonly createdAt: FieldRef<"UserQuestionAnswer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserQuestionAnswer findUnique
   */
  export type UserQuestionAnswerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionAnswer to fetch.
     */
    where: UserQuestionAnswerWhereUniqueInput
  }

  /**
   * UserQuestionAnswer findUniqueOrThrow
   */
  export type UserQuestionAnswerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionAnswer to fetch.
     */
    where: UserQuestionAnswerWhereUniqueInput
  }

  /**
   * UserQuestionAnswer findFirst
   */
  export type UserQuestionAnswerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionAnswer to fetch.
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuestionAnswers to fetch.
     */
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserQuestionAnswers.
     */
    cursor?: UserQuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserQuestionAnswers.
     */
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * UserQuestionAnswer findFirstOrThrow
   */
  export type UserQuestionAnswerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionAnswer to fetch.
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuestionAnswers to fetch.
     */
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserQuestionAnswers.
     */
    cursor?: UserQuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuestionAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserQuestionAnswers.
     */
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * UserQuestionAnswer findMany
   */
  export type UserQuestionAnswerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter, which UserQuestionAnswers to fetch.
     */
    where?: UserQuestionAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuestionAnswers to fetch.
     */
    orderBy?: UserQuestionAnswerOrderByWithRelationInput | UserQuestionAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserQuestionAnswers.
     */
    cursor?: UserQuestionAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuestionAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuestionAnswers.
     */
    skip?: number
    distinct?: UserQuestionAnswerScalarFieldEnum | UserQuestionAnswerScalarFieldEnum[]
  }

  /**
   * UserQuestionAnswer create
   */
  export type UserQuestionAnswerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * The data needed to create a UserQuestionAnswer.
     */
    data: XOR<UserQuestionAnswerCreateInput, UserQuestionAnswerUncheckedCreateInput>
  }

  /**
   * UserQuestionAnswer createMany
   */
  export type UserQuestionAnswerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserQuestionAnswers.
     */
    data: UserQuestionAnswerCreateManyInput | UserQuestionAnswerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserQuestionAnswer createManyAndReturn
   */
  export type UserQuestionAnswerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserQuestionAnswers.
     */
    data: UserQuestionAnswerCreateManyInput | UserQuestionAnswerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserQuestionAnswer update
   */
  export type UserQuestionAnswerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * The data needed to update a UserQuestionAnswer.
     */
    data: XOR<UserQuestionAnswerUpdateInput, UserQuestionAnswerUncheckedUpdateInput>
    /**
     * Choose, which UserQuestionAnswer to update.
     */
    where: UserQuestionAnswerWhereUniqueInput
  }

  /**
   * UserQuestionAnswer updateMany
   */
  export type UserQuestionAnswerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserQuestionAnswers.
     */
    data: XOR<UserQuestionAnswerUpdateManyMutationInput, UserQuestionAnswerUncheckedUpdateManyInput>
    /**
     * Filter which UserQuestionAnswers to update
     */
    where?: UserQuestionAnswerWhereInput
  }

  /**
   * UserQuestionAnswer upsert
   */
  export type UserQuestionAnswerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * The filter to search for the UserQuestionAnswer to update in case it exists.
     */
    where: UserQuestionAnswerWhereUniqueInput
    /**
     * In case the UserQuestionAnswer found by the `where` argument doesn't exist, create a new UserQuestionAnswer with this data.
     */
    create: XOR<UserQuestionAnswerCreateInput, UserQuestionAnswerUncheckedCreateInput>
    /**
     * In case the UserQuestionAnswer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserQuestionAnswerUpdateInput, UserQuestionAnswerUncheckedUpdateInput>
  }

  /**
   * UserQuestionAnswer delete
   */
  export type UserQuestionAnswerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
    /**
     * Filter which UserQuestionAnswer to delete.
     */
    where: UserQuestionAnswerWhereUniqueInput
  }

  /**
   * UserQuestionAnswer deleteMany
   */
  export type UserQuestionAnswerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserQuestionAnswers to delete
     */
    where?: UserQuestionAnswerWhereInput
  }

  /**
   * UserQuestionAnswer without action
   */
  export type UserQuestionAnswerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuestionAnswer
     */
    select?: UserQuestionAnswerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuestionAnswerInclude<ExtArgs> | null
  }


  /**
   * Model UserParticipateQuiz
   */

  export type AggregateUserParticipateQuiz = {
    _count: UserParticipateQuizCountAggregateOutputType | null
    _avg: UserParticipateQuizAvgAggregateOutputType | null
    _sum: UserParticipateQuizSumAggregateOutputType | null
    _min: UserParticipateQuizMinAggregateOutputType | null
    _max: UserParticipateQuizMaxAggregateOutputType | null
  }

  export type UserParticipateQuizAvgAggregateOutputType = {
    id: number | null
    quizId: number | null
  }

  export type UserParticipateQuizSumAggregateOutputType = {
    id: number | null
    quizId: number | null
  }

  export type UserParticipateQuizMinAggregateOutputType = {
    id: number | null
    userId: string | null
    quizId: number | null
    createdAt: Date | null
  }

  export type UserParticipateQuizMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    quizId: number | null
    createdAt: Date | null
  }

  export type UserParticipateQuizCountAggregateOutputType = {
    id: number
    userId: number
    quizId: number
    createdAt: number
    _all: number
  }


  export type UserParticipateQuizAvgAggregateInputType = {
    id?: true
    quizId?: true
  }

  export type UserParticipateQuizSumAggregateInputType = {
    id?: true
    quizId?: true
  }

  export type UserParticipateQuizMinAggregateInputType = {
    id?: true
    userId?: true
    quizId?: true
    createdAt?: true
  }

  export type UserParticipateQuizMaxAggregateInputType = {
    id?: true
    userId?: true
    quizId?: true
    createdAt?: true
  }

  export type UserParticipateQuizCountAggregateInputType = {
    id?: true
    userId?: true
    quizId?: true
    createdAt?: true
    _all?: true
  }

  export type UserParticipateQuizAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserParticipateQuiz to aggregate.
     */
    where?: UserParticipateQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserParticipateQuizs to fetch.
     */
    orderBy?: UserParticipateQuizOrderByWithRelationInput | UserParticipateQuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserParticipateQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserParticipateQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserParticipateQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserParticipateQuizs
    **/
    _count?: true | UserParticipateQuizCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserParticipateQuizAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserParticipateQuizSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserParticipateQuizMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserParticipateQuizMaxAggregateInputType
  }

  export type GetUserParticipateQuizAggregateType<T extends UserParticipateQuizAggregateArgs> = {
        [P in keyof T & keyof AggregateUserParticipateQuiz]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserParticipateQuiz[P]>
      : GetScalarType<T[P], AggregateUserParticipateQuiz[P]>
  }




  export type UserParticipateQuizGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserParticipateQuizWhereInput
    orderBy?: UserParticipateQuizOrderByWithAggregationInput | UserParticipateQuizOrderByWithAggregationInput[]
    by: UserParticipateQuizScalarFieldEnum[] | UserParticipateQuizScalarFieldEnum
    having?: UserParticipateQuizScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserParticipateQuizCountAggregateInputType | true
    _avg?: UserParticipateQuizAvgAggregateInputType
    _sum?: UserParticipateQuizSumAggregateInputType
    _min?: UserParticipateQuizMinAggregateInputType
    _max?: UserParticipateQuizMaxAggregateInputType
  }

  export type UserParticipateQuizGroupByOutputType = {
    id: number
    userId: string
    quizId: number
    createdAt: Date
    _count: UserParticipateQuizCountAggregateOutputType | null
    _avg: UserParticipateQuizAvgAggregateOutputType | null
    _sum: UserParticipateQuizSumAggregateOutputType | null
    _min: UserParticipateQuizMinAggregateOutputType | null
    _max: UserParticipateQuizMaxAggregateOutputType | null
  }

  type GetUserParticipateQuizGroupByPayload<T extends UserParticipateQuizGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserParticipateQuizGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserParticipateQuizGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserParticipateQuizGroupByOutputType[P]>
            : GetScalarType<T[P], UserParticipateQuizGroupByOutputType[P]>
        }
      >
    >


  export type UserParticipateQuizSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    quizId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userParticipateQuiz"]>

  export type UserParticipateQuizSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    quizId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userParticipateQuiz"]>

  export type UserParticipateQuizSelectScalar = {
    id?: boolean
    userId?: boolean
    quizId?: boolean
    createdAt?: boolean
  }

  export type UserParticipateQuizInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
  }
  export type UserParticipateQuizIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
  }

  export type $UserParticipateQuizPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserParticipateQuiz"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      quiz: Prisma.$QuizPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      quizId: number
      createdAt: Date
    }, ExtArgs["result"]["userParticipateQuiz"]>
    composites: {}
  }

  type UserParticipateQuizGetPayload<S extends boolean | null | undefined | UserParticipateQuizDefaultArgs> = $Result.GetResult<Prisma.$UserParticipateQuizPayload, S>

  type UserParticipateQuizCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserParticipateQuizFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserParticipateQuizCountAggregateInputType | true
    }

  export interface UserParticipateQuizDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserParticipateQuiz'], meta: { name: 'UserParticipateQuiz' } }
    /**
     * Find zero or one UserParticipateQuiz that matches the filter.
     * @param {UserParticipateQuizFindUniqueArgs} args - Arguments to find a UserParticipateQuiz
     * @example
     * // Get one UserParticipateQuiz
     * const userParticipateQuiz = await prisma.userParticipateQuiz.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserParticipateQuizFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserParticipateQuizFindUniqueArgs<ExtArgs>>
    ): Prisma__UserParticipateQuizClient<$Result.GetResult<Prisma.$UserParticipateQuizPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserParticipateQuiz that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserParticipateQuizFindUniqueOrThrowArgs} args - Arguments to find a UserParticipateQuiz
     * @example
     * // Get one UserParticipateQuiz
     * const userParticipateQuiz = await prisma.userParticipateQuiz.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserParticipateQuizFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserParticipateQuizFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserParticipateQuizClient<$Result.GetResult<Prisma.$UserParticipateQuizPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserParticipateQuiz that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserParticipateQuizFindFirstArgs} args - Arguments to find a UserParticipateQuiz
     * @example
     * // Get one UserParticipateQuiz
     * const userParticipateQuiz = await prisma.userParticipateQuiz.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserParticipateQuizFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserParticipateQuizFindFirstArgs<ExtArgs>>
    ): Prisma__UserParticipateQuizClient<$Result.GetResult<Prisma.$UserParticipateQuizPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserParticipateQuiz that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserParticipateQuizFindFirstOrThrowArgs} args - Arguments to find a UserParticipateQuiz
     * @example
     * // Get one UserParticipateQuiz
     * const userParticipateQuiz = await prisma.userParticipateQuiz.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserParticipateQuizFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserParticipateQuizFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserParticipateQuizClient<$Result.GetResult<Prisma.$UserParticipateQuizPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserParticipateQuizs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserParticipateQuizFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserParticipateQuizs
     * const userParticipateQuizs = await prisma.userParticipateQuiz.findMany()
     * 
     * // Get first 10 UserParticipateQuizs
     * const userParticipateQuizs = await prisma.userParticipateQuiz.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userParticipateQuizWithIdOnly = await prisma.userParticipateQuiz.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserParticipateQuizFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserParticipateQuizFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserParticipateQuizPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserParticipateQuiz.
     * @param {UserParticipateQuizCreateArgs} args - Arguments to create a UserParticipateQuiz.
     * @example
     * // Create one UserParticipateQuiz
     * const UserParticipateQuiz = await prisma.userParticipateQuiz.create({
     *   data: {
     *     // ... data to create a UserParticipateQuiz
     *   }
     * })
     * 
    **/
    create<T extends UserParticipateQuizCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserParticipateQuizCreateArgs<ExtArgs>>
    ): Prisma__UserParticipateQuizClient<$Result.GetResult<Prisma.$UserParticipateQuizPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserParticipateQuizs.
     * @param {UserParticipateQuizCreateManyArgs} args - Arguments to create many UserParticipateQuizs.
     * @example
     * // Create many UserParticipateQuizs
     * const userParticipateQuiz = await prisma.userParticipateQuiz.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserParticipateQuizCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserParticipateQuizCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserParticipateQuizs and returns the data saved in the database.
     * @param {UserParticipateQuizCreateManyAndReturnArgs} args - Arguments to create many UserParticipateQuizs.
     * @example
     * // Create many UserParticipateQuizs
     * const userParticipateQuiz = await prisma.userParticipateQuiz.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserParticipateQuizs and only return the `id`
     * const userParticipateQuizWithIdOnly = await prisma.userParticipateQuiz.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserParticipateQuizCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserParticipateQuizCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserParticipateQuizPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a UserParticipateQuiz.
     * @param {UserParticipateQuizDeleteArgs} args - Arguments to delete one UserParticipateQuiz.
     * @example
     * // Delete one UserParticipateQuiz
     * const UserParticipateQuiz = await prisma.userParticipateQuiz.delete({
     *   where: {
     *     // ... filter to delete one UserParticipateQuiz
     *   }
     * })
     * 
    **/
    delete<T extends UserParticipateQuizDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserParticipateQuizDeleteArgs<ExtArgs>>
    ): Prisma__UserParticipateQuizClient<$Result.GetResult<Prisma.$UserParticipateQuizPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserParticipateQuiz.
     * @param {UserParticipateQuizUpdateArgs} args - Arguments to update one UserParticipateQuiz.
     * @example
     * // Update one UserParticipateQuiz
     * const userParticipateQuiz = await prisma.userParticipateQuiz.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserParticipateQuizUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserParticipateQuizUpdateArgs<ExtArgs>>
    ): Prisma__UserParticipateQuizClient<$Result.GetResult<Prisma.$UserParticipateQuizPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserParticipateQuizs.
     * @param {UserParticipateQuizDeleteManyArgs} args - Arguments to filter UserParticipateQuizs to delete.
     * @example
     * // Delete a few UserParticipateQuizs
     * const { count } = await prisma.userParticipateQuiz.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserParticipateQuizDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserParticipateQuizDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserParticipateQuizs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserParticipateQuizUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserParticipateQuizs
     * const userParticipateQuiz = await prisma.userParticipateQuiz.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserParticipateQuizUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserParticipateQuizUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserParticipateQuiz.
     * @param {UserParticipateQuizUpsertArgs} args - Arguments to update or create a UserParticipateQuiz.
     * @example
     * // Update or create a UserParticipateQuiz
     * const userParticipateQuiz = await prisma.userParticipateQuiz.upsert({
     *   create: {
     *     // ... data to create a UserParticipateQuiz
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserParticipateQuiz we want to update
     *   }
     * })
    **/
    upsert<T extends UserParticipateQuizUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserParticipateQuizUpsertArgs<ExtArgs>>
    ): Prisma__UserParticipateQuizClient<$Result.GetResult<Prisma.$UserParticipateQuizPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserParticipateQuizs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserParticipateQuizCountArgs} args - Arguments to filter UserParticipateQuizs to count.
     * @example
     * // Count the number of UserParticipateQuizs
     * const count = await prisma.userParticipateQuiz.count({
     *   where: {
     *     // ... the filter for the UserParticipateQuizs we want to count
     *   }
     * })
    **/
    count<T extends UserParticipateQuizCountArgs>(
      args?: Subset<T, UserParticipateQuizCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserParticipateQuizCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserParticipateQuiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserParticipateQuizAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserParticipateQuizAggregateArgs>(args: Subset<T, UserParticipateQuizAggregateArgs>): Prisma.PrismaPromise<GetUserParticipateQuizAggregateType<T>>

    /**
     * Group by UserParticipateQuiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserParticipateQuizGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserParticipateQuizGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserParticipateQuizGroupByArgs['orderBy'] }
        : { orderBy?: UserParticipateQuizGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserParticipateQuizGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserParticipateQuizGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserParticipateQuiz model
   */
  readonly fields: UserParticipateQuizFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserParticipateQuiz.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserParticipateQuizClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    quiz<T extends QuizDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuizDefaultArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserParticipateQuiz model
   */ 
  interface UserParticipateQuizFieldRefs {
    readonly id: FieldRef<"UserParticipateQuiz", 'Int'>
    readonly userId: FieldRef<"UserParticipateQuiz", 'String'>
    readonly quizId: FieldRef<"UserParticipateQuiz", 'Int'>
    readonly createdAt: FieldRef<"UserParticipateQuiz", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserParticipateQuiz findUnique
   */
  export type UserParticipateQuizFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserParticipateQuiz
     */
    select?: UserParticipateQuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserParticipateQuizInclude<ExtArgs> | null
    /**
     * Filter, which UserParticipateQuiz to fetch.
     */
    where: UserParticipateQuizWhereUniqueInput
  }

  /**
   * UserParticipateQuiz findUniqueOrThrow
   */
  export type UserParticipateQuizFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserParticipateQuiz
     */
    select?: UserParticipateQuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserParticipateQuizInclude<ExtArgs> | null
    /**
     * Filter, which UserParticipateQuiz to fetch.
     */
    where: UserParticipateQuizWhereUniqueInput
  }

  /**
   * UserParticipateQuiz findFirst
   */
  export type UserParticipateQuizFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserParticipateQuiz
     */
    select?: UserParticipateQuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserParticipateQuizInclude<ExtArgs> | null
    /**
     * Filter, which UserParticipateQuiz to fetch.
     */
    where?: UserParticipateQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserParticipateQuizs to fetch.
     */
    orderBy?: UserParticipateQuizOrderByWithRelationInput | UserParticipateQuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserParticipateQuizs.
     */
    cursor?: UserParticipateQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserParticipateQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserParticipateQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserParticipateQuizs.
     */
    distinct?: UserParticipateQuizScalarFieldEnum | UserParticipateQuizScalarFieldEnum[]
  }

  /**
   * UserParticipateQuiz findFirstOrThrow
   */
  export type UserParticipateQuizFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserParticipateQuiz
     */
    select?: UserParticipateQuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserParticipateQuizInclude<ExtArgs> | null
    /**
     * Filter, which UserParticipateQuiz to fetch.
     */
    where?: UserParticipateQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserParticipateQuizs to fetch.
     */
    orderBy?: UserParticipateQuizOrderByWithRelationInput | UserParticipateQuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserParticipateQuizs.
     */
    cursor?: UserParticipateQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserParticipateQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserParticipateQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserParticipateQuizs.
     */
    distinct?: UserParticipateQuizScalarFieldEnum | UserParticipateQuizScalarFieldEnum[]
  }

  /**
   * UserParticipateQuiz findMany
   */
  export type UserParticipateQuizFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserParticipateQuiz
     */
    select?: UserParticipateQuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserParticipateQuizInclude<ExtArgs> | null
    /**
     * Filter, which UserParticipateQuizs to fetch.
     */
    where?: UserParticipateQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserParticipateQuizs to fetch.
     */
    orderBy?: UserParticipateQuizOrderByWithRelationInput | UserParticipateQuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserParticipateQuizs.
     */
    cursor?: UserParticipateQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserParticipateQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserParticipateQuizs.
     */
    skip?: number
    distinct?: UserParticipateQuizScalarFieldEnum | UserParticipateQuizScalarFieldEnum[]
  }

  /**
   * UserParticipateQuiz create
   */
  export type UserParticipateQuizCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserParticipateQuiz
     */
    select?: UserParticipateQuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserParticipateQuizInclude<ExtArgs> | null
    /**
     * The data needed to create a UserParticipateQuiz.
     */
    data: XOR<UserParticipateQuizCreateInput, UserParticipateQuizUncheckedCreateInput>
  }

  /**
   * UserParticipateQuiz createMany
   */
  export type UserParticipateQuizCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserParticipateQuizs.
     */
    data: UserParticipateQuizCreateManyInput | UserParticipateQuizCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserParticipateQuiz createManyAndReturn
   */
  export type UserParticipateQuizCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserParticipateQuiz
     */
    select?: UserParticipateQuizSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserParticipateQuizs.
     */
    data: UserParticipateQuizCreateManyInput | UserParticipateQuizCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserParticipateQuizIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserParticipateQuiz update
   */
  export type UserParticipateQuizUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserParticipateQuiz
     */
    select?: UserParticipateQuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserParticipateQuizInclude<ExtArgs> | null
    /**
     * The data needed to update a UserParticipateQuiz.
     */
    data: XOR<UserParticipateQuizUpdateInput, UserParticipateQuizUncheckedUpdateInput>
    /**
     * Choose, which UserParticipateQuiz to update.
     */
    where: UserParticipateQuizWhereUniqueInput
  }

  /**
   * UserParticipateQuiz updateMany
   */
  export type UserParticipateQuizUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserParticipateQuizs.
     */
    data: XOR<UserParticipateQuizUpdateManyMutationInput, UserParticipateQuizUncheckedUpdateManyInput>
    /**
     * Filter which UserParticipateQuizs to update
     */
    where?: UserParticipateQuizWhereInput
  }

  /**
   * UserParticipateQuiz upsert
   */
  export type UserParticipateQuizUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserParticipateQuiz
     */
    select?: UserParticipateQuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserParticipateQuizInclude<ExtArgs> | null
    /**
     * The filter to search for the UserParticipateQuiz to update in case it exists.
     */
    where: UserParticipateQuizWhereUniqueInput
    /**
     * In case the UserParticipateQuiz found by the `where` argument doesn't exist, create a new UserParticipateQuiz with this data.
     */
    create: XOR<UserParticipateQuizCreateInput, UserParticipateQuizUncheckedCreateInput>
    /**
     * In case the UserParticipateQuiz was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserParticipateQuizUpdateInput, UserParticipateQuizUncheckedUpdateInput>
  }

  /**
   * UserParticipateQuiz delete
   */
  export type UserParticipateQuizDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserParticipateQuiz
     */
    select?: UserParticipateQuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserParticipateQuizInclude<ExtArgs> | null
    /**
     * Filter which UserParticipateQuiz to delete.
     */
    where: UserParticipateQuizWhereUniqueInput
  }

  /**
   * UserParticipateQuiz deleteMany
   */
  export type UserParticipateQuizDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserParticipateQuizs to delete
     */
    where?: UserParticipateQuizWhereInput
  }

  /**
   * UserParticipateQuiz without action
   */
  export type UserParticipateQuizDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserParticipateQuiz
     */
    select?: UserParticipateQuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserParticipateQuizInclude<ExtArgs> | null
  }


  /**
   * Model UserQuizScore
   */

  export type AggregateUserQuizScore = {
    _count: UserQuizScoreCountAggregateOutputType | null
    _avg: UserQuizScoreAvgAggregateOutputType | null
    _sum: UserQuizScoreSumAggregateOutputType | null
    _min: UserQuizScoreMinAggregateOutputType | null
    _max: UserQuizScoreMaxAggregateOutputType | null
  }

  export type UserQuizScoreAvgAggregateOutputType = {
    id: number | null
    quizId: number | null
    score: number | null
  }

  export type UserQuizScoreSumAggregateOutputType = {
    id: number | null
    quizId: number | null
    score: number | null
  }

  export type UserQuizScoreMinAggregateOutputType = {
    id: number | null
    userId: string | null
    quizId: number | null
    score: number | null
    createdAt: Date | null
  }

  export type UserQuizScoreMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    quizId: number | null
    score: number | null
    createdAt: Date | null
  }

  export type UserQuizScoreCountAggregateOutputType = {
    id: number
    userId: number
    quizId: number
    score: number
    createdAt: number
    _all: number
  }


  export type UserQuizScoreAvgAggregateInputType = {
    id?: true
    quizId?: true
    score?: true
  }

  export type UserQuizScoreSumAggregateInputType = {
    id?: true
    quizId?: true
    score?: true
  }

  export type UserQuizScoreMinAggregateInputType = {
    id?: true
    userId?: true
    quizId?: true
    score?: true
    createdAt?: true
  }

  export type UserQuizScoreMaxAggregateInputType = {
    id?: true
    userId?: true
    quizId?: true
    score?: true
    createdAt?: true
  }

  export type UserQuizScoreCountAggregateInputType = {
    id?: true
    userId?: true
    quizId?: true
    score?: true
    createdAt?: true
    _all?: true
  }

  export type UserQuizScoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserQuizScore to aggregate.
     */
    where?: UserQuizScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuizScores to fetch.
     */
    orderBy?: UserQuizScoreOrderByWithRelationInput | UserQuizScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserQuizScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuizScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuizScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserQuizScores
    **/
    _count?: true | UserQuizScoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserQuizScoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserQuizScoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserQuizScoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserQuizScoreMaxAggregateInputType
  }

  export type GetUserQuizScoreAggregateType<T extends UserQuizScoreAggregateArgs> = {
        [P in keyof T & keyof AggregateUserQuizScore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserQuizScore[P]>
      : GetScalarType<T[P], AggregateUserQuizScore[P]>
  }




  export type UserQuizScoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserQuizScoreWhereInput
    orderBy?: UserQuizScoreOrderByWithAggregationInput | UserQuizScoreOrderByWithAggregationInput[]
    by: UserQuizScoreScalarFieldEnum[] | UserQuizScoreScalarFieldEnum
    having?: UserQuizScoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserQuizScoreCountAggregateInputType | true
    _avg?: UserQuizScoreAvgAggregateInputType
    _sum?: UserQuizScoreSumAggregateInputType
    _min?: UserQuizScoreMinAggregateInputType
    _max?: UserQuizScoreMaxAggregateInputType
  }

  export type UserQuizScoreGroupByOutputType = {
    id: number
    userId: string
    quizId: number
    score: number
    createdAt: Date
    _count: UserQuizScoreCountAggregateOutputType | null
    _avg: UserQuizScoreAvgAggregateOutputType | null
    _sum: UserQuizScoreSumAggregateOutputType | null
    _min: UserQuizScoreMinAggregateOutputType | null
    _max: UserQuizScoreMaxAggregateOutputType | null
  }

  type GetUserQuizScoreGroupByPayload<T extends UserQuizScoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserQuizScoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserQuizScoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserQuizScoreGroupByOutputType[P]>
            : GetScalarType<T[P], UserQuizScoreGroupByOutputType[P]>
        }
      >
    >


  export type UserQuizScoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    quizId?: boolean
    score?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userQuizScore"]>

  export type UserQuizScoreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    quizId?: boolean
    score?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userQuizScore"]>

  export type UserQuizScoreSelectScalar = {
    id?: boolean
    userId?: boolean
    quizId?: boolean
    score?: boolean
    createdAt?: boolean
  }

  export type UserQuizScoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
  }
  export type UserQuizScoreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
  }

  export type $UserQuizScorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserQuizScore"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      quiz: Prisma.$QuizPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      quizId: number
      score: number
      createdAt: Date
    }, ExtArgs["result"]["userQuizScore"]>
    composites: {}
  }

  type UserQuizScoreGetPayload<S extends boolean | null | undefined | UserQuizScoreDefaultArgs> = $Result.GetResult<Prisma.$UserQuizScorePayload, S>

  type UserQuizScoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserQuizScoreFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserQuizScoreCountAggregateInputType | true
    }

  export interface UserQuizScoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserQuizScore'], meta: { name: 'UserQuizScore' } }
    /**
     * Find zero or one UserQuizScore that matches the filter.
     * @param {UserQuizScoreFindUniqueArgs} args - Arguments to find a UserQuizScore
     * @example
     * // Get one UserQuizScore
     * const userQuizScore = await prisma.userQuizScore.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserQuizScoreFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserQuizScoreFindUniqueArgs<ExtArgs>>
    ): Prisma__UserQuizScoreClient<$Result.GetResult<Prisma.$UserQuizScorePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserQuizScore that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserQuizScoreFindUniqueOrThrowArgs} args - Arguments to find a UserQuizScore
     * @example
     * // Get one UserQuizScore
     * const userQuizScore = await prisma.userQuizScore.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserQuizScoreFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserQuizScoreFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserQuizScoreClient<$Result.GetResult<Prisma.$UserQuizScorePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserQuizScore that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuizScoreFindFirstArgs} args - Arguments to find a UserQuizScore
     * @example
     * // Get one UserQuizScore
     * const userQuizScore = await prisma.userQuizScore.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserQuizScoreFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserQuizScoreFindFirstArgs<ExtArgs>>
    ): Prisma__UserQuizScoreClient<$Result.GetResult<Prisma.$UserQuizScorePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserQuizScore that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuizScoreFindFirstOrThrowArgs} args - Arguments to find a UserQuizScore
     * @example
     * // Get one UserQuizScore
     * const userQuizScore = await prisma.userQuizScore.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserQuizScoreFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserQuizScoreFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserQuizScoreClient<$Result.GetResult<Prisma.$UserQuizScorePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserQuizScores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuizScoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserQuizScores
     * const userQuizScores = await prisma.userQuizScore.findMany()
     * 
     * // Get first 10 UserQuizScores
     * const userQuizScores = await prisma.userQuizScore.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userQuizScoreWithIdOnly = await prisma.userQuizScore.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserQuizScoreFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserQuizScoreFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuizScorePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserQuizScore.
     * @param {UserQuizScoreCreateArgs} args - Arguments to create a UserQuizScore.
     * @example
     * // Create one UserQuizScore
     * const UserQuizScore = await prisma.userQuizScore.create({
     *   data: {
     *     // ... data to create a UserQuizScore
     *   }
     * })
     * 
    **/
    create<T extends UserQuizScoreCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserQuizScoreCreateArgs<ExtArgs>>
    ): Prisma__UserQuizScoreClient<$Result.GetResult<Prisma.$UserQuizScorePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserQuizScores.
     * @param {UserQuizScoreCreateManyArgs} args - Arguments to create many UserQuizScores.
     * @example
     * // Create many UserQuizScores
     * const userQuizScore = await prisma.userQuizScore.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserQuizScoreCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserQuizScoreCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserQuizScores and returns the data saved in the database.
     * @param {UserQuizScoreCreateManyAndReturnArgs} args - Arguments to create many UserQuizScores.
     * @example
     * // Create many UserQuizScores
     * const userQuizScore = await prisma.userQuizScore.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserQuizScores and only return the `id`
     * const userQuizScoreWithIdOnly = await prisma.userQuizScore.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserQuizScoreCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserQuizScoreCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserQuizScorePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a UserQuizScore.
     * @param {UserQuizScoreDeleteArgs} args - Arguments to delete one UserQuizScore.
     * @example
     * // Delete one UserQuizScore
     * const UserQuizScore = await prisma.userQuizScore.delete({
     *   where: {
     *     // ... filter to delete one UserQuizScore
     *   }
     * })
     * 
    **/
    delete<T extends UserQuizScoreDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserQuizScoreDeleteArgs<ExtArgs>>
    ): Prisma__UserQuizScoreClient<$Result.GetResult<Prisma.$UserQuizScorePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserQuizScore.
     * @param {UserQuizScoreUpdateArgs} args - Arguments to update one UserQuizScore.
     * @example
     * // Update one UserQuizScore
     * const userQuizScore = await prisma.userQuizScore.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserQuizScoreUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserQuizScoreUpdateArgs<ExtArgs>>
    ): Prisma__UserQuizScoreClient<$Result.GetResult<Prisma.$UserQuizScorePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserQuizScores.
     * @param {UserQuizScoreDeleteManyArgs} args - Arguments to filter UserQuizScores to delete.
     * @example
     * // Delete a few UserQuizScores
     * const { count } = await prisma.userQuizScore.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserQuizScoreDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserQuizScoreDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserQuizScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuizScoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserQuizScores
     * const userQuizScore = await prisma.userQuizScore.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserQuizScoreUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserQuizScoreUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserQuizScore.
     * @param {UserQuizScoreUpsertArgs} args - Arguments to update or create a UserQuizScore.
     * @example
     * // Update or create a UserQuizScore
     * const userQuizScore = await prisma.userQuizScore.upsert({
     *   create: {
     *     // ... data to create a UserQuizScore
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserQuizScore we want to update
     *   }
     * })
    **/
    upsert<T extends UserQuizScoreUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserQuizScoreUpsertArgs<ExtArgs>>
    ): Prisma__UserQuizScoreClient<$Result.GetResult<Prisma.$UserQuizScorePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserQuizScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuizScoreCountArgs} args - Arguments to filter UserQuizScores to count.
     * @example
     * // Count the number of UserQuizScores
     * const count = await prisma.userQuizScore.count({
     *   where: {
     *     // ... the filter for the UserQuizScores we want to count
     *   }
     * })
    **/
    count<T extends UserQuizScoreCountArgs>(
      args?: Subset<T, UserQuizScoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserQuizScoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserQuizScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuizScoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserQuizScoreAggregateArgs>(args: Subset<T, UserQuizScoreAggregateArgs>): Prisma.PrismaPromise<GetUserQuizScoreAggregateType<T>>

    /**
     * Group by UserQuizScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserQuizScoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserQuizScoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserQuizScoreGroupByArgs['orderBy'] }
        : { orderBy?: UserQuizScoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserQuizScoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserQuizScoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserQuizScore model
   */
  readonly fields: UserQuizScoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserQuizScore.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserQuizScoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    quiz<T extends QuizDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuizDefaultArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserQuizScore model
   */ 
  interface UserQuizScoreFieldRefs {
    readonly id: FieldRef<"UserQuizScore", 'Int'>
    readonly userId: FieldRef<"UserQuizScore", 'String'>
    readonly quizId: FieldRef<"UserQuizScore", 'Int'>
    readonly score: FieldRef<"UserQuizScore", 'Int'>
    readonly createdAt: FieldRef<"UserQuizScore", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserQuizScore findUnique
   */
  export type UserQuizScoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuizScore
     */
    select?: UserQuizScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuizScoreInclude<ExtArgs> | null
    /**
     * Filter, which UserQuizScore to fetch.
     */
    where: UserQuizScoreWhereUniqueInput
  }

  /**
   * UserQuizScore findUniqueOrThrow
   */
  export type UserQuizScoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuizScore
     */
    select?: UserQuizScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuizScoreInclude<ExtArgs> | null
    /**
     * Filter, which UserQuizScore to fetch.
     */
    where: UserQuizScoreWhereUniqueInput
  }

  /**
   * UserQuizScore findFirst
   */
  export type UserQuizScoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuizScore
     */
    select?: UserQuizScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuizScoreInclude<ExtArgs> | null
    /**
     * Filter, which UserQuizScore to fetch.
     */
    where?: UserQuizScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuizScores to fetch.
     */
    orderBy?: UserQuizScoreOrderByWithRelationInput | UserQuizScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserQuizScores.
     */
    cursor?: UserQuizScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuizScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuizScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserQuizScores.
     */
    distinct?: UserQuizScoreScalarFieldEnum | UserQuizScoreScalarFieldEnum[]
  }

  /**
   * UserQuizScore findFirstOrThrow
   */
  export type UserQuizScoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuizScore
     */
    select?: UserQuizScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuizScoreInclude<ExtArgs> | null
    /**
     * Filter, which UserQuizScore to fetch.
     */
    where?: UserQuizScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuizScores to fetch.
     */
    orderBy?: UserQuizScoreOrderByWithRelationInput | UserQuizScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserQuizScores.
     */
    cursor?: UserQuizScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuizScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuizScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserQuizScores.
     */
    distinct?: UserQuizScoreScalarFieldEnum | UserQuizScoreScalarFieldEnum[]
  }

  /**
   * UserQuizScore findMany
   */
  export type UserQuizScoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuizScore
     */
    select?: UserQuizScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuizScoreInclude<ExtArgs> | null
    /**
     * Filter, which UserQuizScores to fetch.
     */
    where?: UserQuizScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserQuizScores to fetch.
     */
    orderBy?: UserQuizScoreOrderByWithRelationInput | UserQuizScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserQuizScores.
     */
    cursor?: UserQuizScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserQuizScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserQuizScores.
     */
    skip?: number
    distinct?: UserQuizScoreScalarFieldEnum | UserQuizScoreScalarFieldEnum[]
  }

  /**
   * UserQuizScore create
   */
  export type UserQuizScoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuizScore
     */
    select?: UserQuizScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuizScoreInclude<ExtArgs> | null
    /**
     * The data needed to create a UserQuizScore.
     */
    data: XOR<UserQuizScoreCreateInput, UserQuizScoreUncheckedCreateInput>
  }

  /**
   * UserQuizScore createMany
   */
  export type UserQuizScoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserQuizScores.
     */
    data: UserQuizScoreCreateManyInput | UserQuizScoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserQuizScore createManyAndReturn
   */
  export type UserQuizScoreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuizScore
     */
    select?: UserQuizScoreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserQuizScores.
     */
    data: UserQuizScoreCreateManyInput | UserQuizScoreCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuizScoreIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserQuizScore update
   */
  export type UserQuizScoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuizScore
     */
    select?: UserQuizScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuizScoreInclude<ExtArgs> | null
    /**
     * The data needed to update a UserQuizScore.
     */
    data: XOR<UserQuizScoreUpdateInput, UserQuizScoreUncheckedUpdateInput>
    /**
     * Choose, which UserQuizScore to update.
     */
    where: UserQuizScoreWhereUniqueInput
  }

  /**
   * UserQuizScore updateMany
   */
  export type UserQuizScoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserQuizScores.
     */
    data: XOR<UserQuizScoreUpdateManyMutationInput, UserQuizScoreUncheckedUpdateManyInput>
    /**
     * Filter which UserQuizScores to update
     */
    where?: UserQuizScoreWhereInput
  }

  /**
   * UserQuizScore upsert
   */
  export type UserQuizScoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuizScore
     */
    select?: UserQuizScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuizScoreInclude<ExtArgs> | null
    /**
     * The filter to search for the UserQuizScore to update in case it exists.
     */
    where: UserQuizScoreWhereUniqueInput
    /**
     * In case the UserQuizScore found by the `where` argument doesn't exist, create a new UserQuizScore with this data.
     */
    create: XOR<UserQuizScoreCreateInput, UserQuizScoreUncheckedCreateInput>
    /**
     * In case the UserQuizScore was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserQuizScoreUpdateInput, UserQuizScoreUncheckedUpdateInput>
  }

  /**
   * UserQuizScore delete
   */
  export type UserQuizScoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuizScore
     */
    select?: UserQuizScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuizScoreInclude<ExtArgs> | null
    /**
     * Filter which UserQuizScore to delete.
     */
    where: UserQuizScoreWhereUniqueInput
  }

  /**
   * UserQuizScore deleteMany
   */
  export type UserQuizScoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserQuizScores to delete
     */
    where?: UserQuizScoreWhereInput
  }

  /**
   * UserQuizScore without action
   */
  export type UserQuizScoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserQuizScore
     */
    select?: UserQuizScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserQuizScoreInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    username: 'username',
    password: 'password',
    avatar: 'avatar',
    createdAt: 'createdAt',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    quizId: 'quizId',
    question: 'question',
    correctAnswer: 'correctAnswer',
    incorrectAnswers: 'incorrectAnswers',
    createdAt: 'createdAt'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const QuizScalarFieldEnum: {
    id: 'id',
    categoryId: 'categoryId',
    name: 'name',
    type: 'type',
    difficulty: 'difficulty',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt'
  };

  export type QuizScalarFieldEnum = (typeof QuizScalarFieldEnum)[keyof typeof QuizScalarFieldEnum]


  export const UserQuestionAnswerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    quizId: 'quizId',
    questionId: 'questionId',
    answer: 'answer',
    isCorrect: 'isCorrect',
    createdAt: 'createdAt'
  };

  export type UserQuestionAnswerScalarFieldEnum = (typeof UserQuestionAnswerScalarFieldEnum)[keyof typeof UserQuestionAnswerScalarFieldEnum]


  export const UserParticipateQuizScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    quizId: 'quizId',
    createdAt: 'createdAt'
  };

  export type UserParticipateQuizScalarFieldEnum = (typeof UserParticipateQuizScalarFieldEnum)[keyof typeof UserParticipateQuizScalarFieldEnum]


  export const UserQuizScoreScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    quizId: 'quizId',
    score: 'score',
    createdAt: 'createdAt'
  };

  export type UserQuizScoreScalarFieldEnum = (typeof UserQuizScoreScalarFieldEnum)[keyof typeof UserQuizScoreScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Type'
   */
  export type EnumTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Type'>
    


  /**
   * Reference to a field of type 'Type[]'
   */
  export type ListEnumTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Type[]'>
    


  /**
   * Reference to a field of type 'Difficulty'
   */
  export type EnumDifficultyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Difficulty'>
    


  /**
   * Reference to a field of type 'Difficulty[]'
   */
  export type ListEnumDifficultyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Difficulty[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    avatar?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    UserQuestionAnswer?: UserQuestionAnswerListRelationFilter
    UserParticipateQuiz?: UserParticipateQuizListRelationFilter
    UserQuizScore?: UserQuizScoreListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    role?: SortOrder
    UserQuestionAnswer?: UserQuestionAnswerOrderByRelationAggregateInput
    UserParticipateQuiz?: UserParticipateQuizOrderByRelationAggregateInput
    UserQuizScore?: UserQuizScoreOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    avatar?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    UserQuestionAnswer?: UserQuestionAnswerListRelationFilter
    UserParticipateQuiz?: UserParticipateQuizListRelationFilter
    UserQuizScore?: UserQuizScoreListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    createdAt?: DateTimeFilter<"Category"> | Date | string
    quizzes?: QuizListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    quizzes?: QuizOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    createdAt?: DateTimeFilter<"Category"> | Date | string
    quizzes?: QuizListRelationFilter
  }, "id" | "name">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    id?: IntFilter<"Question"> | number
    quizId?: IntNullableFilter<"Question"> | number | null
    question?: StringFilter<"Question"> | string
    correctAnswer?: StringFilter<"Question"> | string
    incorrectAnswers?: StringNullableListFilter<"Question">
    createdAt?: DateTimeFilter<"Question"> | Date | string
    userQuestionAnswers?: UserQuestionAnswerListRelationFilter
    quiz?: XOR<QuizNullableRelationFilter, QuizWhereInput> | null
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    quizId?: SortOrderInput | SortOrder
    question?: SortOrder
    correctAnswer?: SortOrder
    incorrectAnswers?: SortOrder
    createdAt?: SortOrder
    userQuestionAnswers?: UserQuestionAnswerOrderByRelationAggregateInput
    quiz?: QuizOrderByWithRelationInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    quizId?: IntNullableFilter<"Question"> | number | null
    question?: StringFilter<"Question"> | string
    correctAnswer?: StringFilter<"Question"> | string
    incorrectAnswers?: StringNullableListFilter<"Question">
    createdAt?: DateTimeFilter<"Question"> | Date | string
    userQuestionAnswers?: UserQuestionAnswerListRelationFilter
    quiz?: XOR<QuizNullableRelationFilter, QuizWhereInput> | null
  }, "id">

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    quizId?: SortOrderInput | SortOrder
    question?: SortOrder
    correctAnswer?: SortOrder
    incorrectAnswers?: SortOrder
    createdAt?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Question"> | number
    quizId?: IntNullableWithAggregatesFilter<"Question"> | number | null
    question?: StringWithAggregatesFilter<"Question"> | string
    correctAnswer?: StringWithAggregatesFilter<"Question"> | string
    incorrectAnswers?: StringNullableListFilter<"Question">
    createdAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
  }

  export type QuizWhereInput = {
    AND?: QuizWhereInput | QuizWhereInput[]
    OR?: QuizWhereInput[]
    NOT?: QuizWhereInput | QuizWhereInput[]
    id?: IntFilter<"Quiz"> | number
    categoryId?: IntFilter<"Quiz"> | number
    name?: StringFilter<"Quiz"> | string
    type?: EnumTypeFilter<"Quiz"> | $Enums.Type
    difficulty?: EnumDifficultyFilter<"Quiz"> | $Enums.Difficulty
    startDate?: StringFilter<"Quiz"> | string
    endDate?: StringFilter<"Quiz"> | string
    createdAt?: DateTimeFilter<"Quiz"> | Date | string
    questions?: QuestionListRelationFilter
    userQuestionAnswers?: UserQuestionAnswerListRelationFilter
    userParticipateQuizzes?: UserParticipateQuizListRelationFilter
    userQuizScores?: UserQuizScoreListRelationFilter
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }

  export type QuizOrderByWithRelationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    difficulty?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    questions?: QuestionOrderByRelationAggregateInput
    userQuestionAnswers?: UserQuestionAnswerOrderByRelationAggregateInput
    userParticipateQuizzes?: UserParticipateQuizOrderByRelationAggregateInput
    userQuizScores?: UserQuizScoreOrderByRelationAggregateInput
    category?: CategoryOrderByWithRelationInput
  }

  export type QuizWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuizWhereInput | QuizWhereInput[]
    OR?: QuizWhereInput[]
    NOT?: QuizWhereInput | QuizWhereInput[]
    categoryId?: IntFilter<"Quiz"> | number
    name?: StringFilter<"Quiz"> | string
    type?: EnumTypeFilter<"Quiz"> | $Enums.Type
    difficulty?: EnumDifficultyFilter<"Quiz"> | $Enums.Difficulty
    startDate?: StringFilter<"Quiz"> | string
    endDate?: StringFilter<"Quiz"> | string
    createdAt?: DateTimeFilter<"Quiz"> | Date | string
    questions?: QuestionListRelationFilter
    userQuestionAnswers?: UserQuestionAnswerListRelationFilter
    userParticipateQuizzes?: UserParticipateQuizListRelationFilter
    userQuizScores?: UserQuizScoreListRelationFilter
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }, "id">

  export type QuizOrderByWithAggregationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    difficulty?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    _count?: QuizCountOrderByAggregateInput
    _avg?: QuizAvgOrderByAggregateInput
    _max?: QuizMaxOrderByAggregateInput
    _min?: QuizMinOrderByAggregateInput
    _sum?: QuizSumOrderByAggregateInput
  }

  export type QuizScalarWhereWithAggregatesInput = {
    AND?: QuizScalarWhereWithAggregatesInput | QuizScalarWhereWithAggregatesInput[]
    OR?: QuizScalarWhereWithAggregatesInput[]
    NOT?: QuizScalarWhereWithAggregatesInput | QuizScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Quiz"> | number
    categoryId?: IntWithAggregatesFilter<"Quiz"> | number
    name?: StringWithAggregatesFilter<"Quiz"> | string
    type?: EnumTypeWithAggregatesFilter<"Quiz"> | $Enums.Type
    difficulty?: EnumDifficultyWithAggregatesFilter<"Quiz"> | $Enums.Difficulty
    startDate?: StringWithAggregatesFilter<"Quiz"> | string
    endDate?: StringWithAggregatesFilter<"Quiz"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Quiz"> | Date | string
  }

  export type UserQuestionAnswerWhereInput = {
    AND?: UserQuestionAnswerWhereInput | UserQuestionAnswerWhereInput[]
    OR?: UserQuestionAnswerWhereInput[]
    NOT?: UserQuestionAnswerWhereInput | UserQuestionAnswerWhereInput[]
    id?: IntFilter<"UserQuestionAnswer"> | number
    userId?: StringFilter<"UserQuestionAnswer"> | string
    quizId?: IntFilter<"UserQuestionAnswer"> | number
    questionId?: IntFilter<"UserQuestionAnswer"> | number
    answer?: StringFilter<"UserQuestionAnswer"> | string
    isCorrect?: BoolFilter<"UserQuestionAnswer"> | boolean
    createdAt?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    quiz?: XOR<QuizRelationFilter, QuizWhereInput>
    question?: XOR<QuestionRelationFilter, QuestionWhereInput>
  }

  export type UserQuestionAnswerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    questionId?: SortOrder
    answer?: SortOrder
    isCorrect?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    quiz?: QuizOrderByWithRelationInput
    question?: QuestionOrderByWithRelationInput
  }

  export type UserQuestionAnswerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserQuestionAnswerWhereInput | UserQuestionAnswerWhereInput[]
    OR?: UserQuestionAnswerWhereInput[]
    NOT?: UserQuestionAnswerWhereInput | UserQuestionAnswerWhereInput[]
    userId?: StringFilter<"UserQuestionAnswer"> | string
    quizId?: IntFilter<"UserQuestionAnswer"> | number
    questionId?: IntFilter<"UserQuestionAnswer"> | number
    answer?: StringFilter<"UserQuestionAnswer"> | string
    isCorrect?: BoolFilter<"UserQuestionAnswer"> | boolean
    createdAt?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    quiz?: XOR<QuizRelationFilter, QuizWhereInput>
    question?: XOR<QuestionRelationFilter, QuestionWhereInput>
  }, "id">

  export type UserQuestionAnswerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    questionId?: SortOrder
    answer?: SortOrder
    isCorrect?: SortOrder
    createdAt?: SortOrder
    _count?: UserQuestionAnswerCountOrderByAggregateInput
    _avg?: UserQuestionAnswerAvgOrderByAggregateInput
    _max?: UserQuestionAnswerMaxOrderByAggregateInput
    _min?: UserQuestionAnswerMinOrderByAggregateInput
    _sum?: UserQuestionAnswerSumOrderByAggregateInput
  }

  export type UserQuestionAnswerScalarWhereWithAggregatesInput = {
    AND?: UserQuestionAnswerScalarWhereWithAggregatesInput | UserQuestionAnswerScalarWhereWithAggregatesInput[]
    OR?: UserQuestionAnswerScalarWhereWithAggregatesInput[]
    NOT?: UserQuestionAnswerScalarWhereWithAggregatesInput | UserQuestionAnswerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserQuestionAnswer"> | number
    userId?: StringWithAggregatesFilter<"UserQuestionAnswer"> | string
    quizId?: IntWithAggregatesFilter<"UserQuestionAnswer"> | number
    questionId?: IntWithAggregatesFilter<"UserQuestionAnswer"> | number
    answer?: StringWithAggregatesFilter<"UserQuestionAnswer"> | string
    isCorrect?: BoolWithAggregatesFilter<"UserQuestionAnswer"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserQuestionAnswer"> | Date | string
  }

  export type UserParticipateQuizWhereInput = {
    AND?: UserParticipateQuizWhereInput | UserParticipateQuizWhereInput[]
    OR?: UserParticipateQuizWhereInput[]
    NOT?: UserParticipateQuizWhereInput | UserParticipateQuizWhereInput[]
    id?: IntFilter<"UserParticipateQuiz"> | number
    userId?: StringFilter<"UserParticipateQuiz"> | string
    quizId?: IntFilter<"UserParticipateQuiz"> | number
    createdAt?: DateTimeFilter<"UserParticipateQuiz"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    quiz?: XOR<QuizRelationFilter, QuizWhereInput>
  }

  export type UserParticipateQuizOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    quiz?: QuizOrderByWithRelationInput
  }

  export type UserParticipateQuizWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserParticipateQuizWhereInput | UserParticipateQuizWhereInput[]
    OR?: UserParticipateQuizWhereInput[]
    NOT?: UserParticipateQuizWhereInput | UserParticipateQuizWhereInput[]
    userId?: StringFilter<"UserParticipateQuiz"> | string
    quizId?: IntFilter<"UserParticipateQuiz"> | number
    createdAt?: DateTimeFilter<"UserParticipateQuiz"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    quiz?: XOR<QuizRelationFilter, QuizWhereInput>
  }, "id">

  export type UserParticipateQuizOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
    _count?: UserParticipateQuizCountOrderByAggregateInput
    _avg?: UserParticipateQuizAvgOrderByAggregateInput
    _max?: UserParticipateQuizMaxOrderByAggregateInput
    _min?: UserParticipateQuizMinOrderByAggregateInput
    _sum?: UserParticipateQuizSumOrderByAggregateInput
  }

  export type UserParticipateQuizScalarWhereWithAggregatesInput = {
    AND?: UserParticipateQuizScalarWhereWithAggregatesInput | UserParticipateQuizScalarWhereWithAggregatesInput[]
    OR?: UserParticipateQuizScalarWhereWithAggregatesInput[]
    NOT?: UserParticipateQuizScalarWhereWithAggregatesInput | UserParticipateQuizScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserParticipateQuiz"> | number
    userId?: StringWithAggregatesFilter<"UserParticipateQuiz"> | string
    quizId?: IntWithAggregatesFilter<"UserParticipateQuiz"> | number
    createdAt?: DateTimeWithAggregatesFilter<"UserParticipateQuiz"> | Date | string
  }

  export type UserQuizScoreWhereInput = {
    AND?: UserQuizScoreWhereInput | UserQuizScoreWhereInput[]
    OR?: UserQuizScoreWhereInput[]
    NOT?: UserQuizScoreWhereInput | UserQuizScoreWhereInput[]
    id?: IntFilter<"UserQuizScore"> | number
    userId?: StringFilter<"UserQuizScore"> | string
    quizId?: IntFilter<"UserQuizScore"> | number
    score?: IntFilter<"UserQuizScore"> | number
    createdAt?: DateTimeFilter<"UserQuizScore"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    quiz?: XOR<QuizRelationFilter, QuizWhereInput>
  }

  export type UserQuizScoreOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    quiz?: QuizOrderByWithRelationInput
  }

  export type UserQuizScoreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserQuizScoreWhereInput | UserQuizScoreWhereInput[]
    OR?: UserQuizScoreWhereInput[]
    NOT?: UserQuizScoreWhereInput | UserQuizScoreWhereInput[]
    userId?: StringFilter<"UserQuizScore"> | string
    quizId?: IntFilter<"UserQuizScore"> | number
    score?: IntFilter<"UserQuizScore"> | number
    createdAt?: DateTimeFilter<"UserQuizScore"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    quiz?: XOR<QuizRelationFilter, QuizWhereInput>
  }, "id">

  export type UserQuizScoreOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    _count?: UserQuizScoreCountOrderByAggregateInput
    _avg?: UserQuizScoreAvgOrderByAggregateInput
    _max?: UserQuizScoreMaxOrderByAggregateInput
    _min?: UserQuizScoreMinOrderByAggregateInput
    _sum?: UserQuizScoreSumOrderByAggregateInput
  }

  export type UserQuizScoreScalarWhereWithAggregatesInput = {
    AND?: UserQuizScoreScalarWhereWithAggregatesInput | UserQuizScoreScalarWhereWithAggregatesInput[]
    OR?: UserQuizScoreScalarWhereWithAggregatesInput[]
    NOT?: UserQuizScoreScalarWhereWithAggregatesInput | UserQuizScoreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserQuizScore"> | number
    userId?: StringWithAggregatesFilter<"UserQuizScore"> | string
    quizId?: IntWithAggregatesFilter<"UserQuizScore"> | number
    score?: IntWithAggregatesFilter<"UserQuizScore"> | number
    createdAt?: DateTimeWithAggregatesFilter<"UserQuizScore"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    username: string
    password: string
    avatar: string
    createdAt?: Date | string
    role?: $Enums.Role
    UserQuestionAnswer?: UserQuestionAnswerCreateNestedManyWithoutUserInput
    UserParticipateQuiz?: UserParticipateQuizCreateNestedManyWithoutUserInput
    UserQuizScore?: UserQuizScoreCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    username: string
    password: string
    avatar: string
    createdAt?: Date | string
    role?: $Enums.Role
    UserQuestionAnswer?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput
    UserParticipateQuiz?: UserParticipateQuizUncheckedCreateNestedManyWithoutUserInput
    UserQuizScore?: UserQuizScoreUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    UserQuestionAnswer?: UserQuestionAnswerUpdateManyWithoutUserNestedInput
    UserParticipateQuiz?: UserParticipateQuizUpdateManyWithoutUserNestedInput
    UserQuizScore?: UserQuizScoreUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    UserQuestionAnswer?: UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
    UserParticipateQuiz?: UserParticipateQuizUncheckedUpdateManyWithoutUserNestedInput
    UserQuizScore?: UserQuizScoreUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    username: string
    password: string
    avatar: string
    createdAt?: Date | string
    role?: $Enums.Role
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type CategoryCreateInput = {
    id: number
    name: string
    createdAt?: Date | string
    quizzes?: QuizCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id: number
    name: string
    createdAt?: Date | string
    quizzes?: QuizUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quizzes?: QuizUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quizzes?: QuizUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id: number
    name: string
    createdAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCreateInput = {
    question: string
    correctAnswer: string
    incorrectAnswers?: QuestionCreateincorrectAnswersInput | string[]
    createdAt?: Date | string
    userQuestionAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuestionInput
    quiz?: QuizCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: number
    quizId?: number | null
    question: string
    correctAnswer: string
    incorrectAnswers?: QuestionCreateincorrectAnswersInput | string[]
    createdAt?: Date | string
    userQuestionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    correctAnswer?: StringFieldUpdateOperationsInput | string
    incorrectAnswers?: QuestionUpdateincorrectAnswersInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userQuestionAnswers?: UserQuestionAnswerUpdateManyWithoutQuestionNestedInput
    quiz?: QuizUpdateOneWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizId?: NullableIntFieldUpdateOperationsInput | number | null
    question?: StringFieldUpdateOperationsInput | string
    correctAnswer?: StringFieldUpdateOperationsInput | string
    incorrectAnswers?: QuestionUpdateincorrectAnswersInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userQuestionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionCreateManyInput = {
    id?: number
    quizId?: number | null
    question: string
    correctAnswer: string
    incorrectAnswers?: QuestionCreateincorrectAnswersInput | string[]
    createdAt?: Date | string
  }

  export type QuestionUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    correctAnswer?: StringFieldUpdateOperationsInput | string
    incorrectAnswers?: QuestionUpdateincorrectAnswersInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizId?: NullableIntFieldUpdateOperationsInput | number | null
    question?: StringFieldUpdateOperationsInput | string
    correctAnswer?: StringFieldUpdateOperationsInput | string
    incorrectAnswers?: QuestionUpdateincorrectAnswersInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizCreateInput = {
    name: string
    type: $Enums.Type
    difficulty: $Enums.Difficulty
    startDate: string
    endDate: string
    createdAt?: Date | string
    questions?: QuestionCreateNestedManyWithoutQuizInput
    userQuestionAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuizInput
    userParticipateQuizzes?: UserParticipateQuizCreateNestedManyWithoutQuizInput
    userQuizScores?: UserQuizScoreCreateNestedManyWithoutQuizInput
    category: CategoryCreateNestedOneWithoutQuizzesInput
  }

  export type QuizUncheckedCreateInput = {
    id?: number
    categoryId: number
    name: string
    type: $Enums.Type
    difficulty: $Enums.Difficulty
    startDate: string
    endDate: string
    createdAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutQuizInput
    userQuestionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuizInput
    userParticipateQuizzes?: UserParticipateQuizUncheckedCreateNestedManyWithoutQuizInput
    userQuizScores?: UserQuizScoreUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUpdateManyWithoutQuizNestedInput
    userQuestionAnswers?: UserQuestionAnswerUpdateManyWithoutQuizNestedInput
    userParticipateQuizzes?: UserParticipateQuizUpdateManyWithoutQuizNestedInput
    userQuizScores?: UserQuizScoreUpdateManyWithoutQuizNestedInput
    category?: CategoryUpdateOneRequiredWithoutQuizzesNestedInput
  }

  export type QuizUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutQuizNestedInput
    userQuestionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuizNestedInput
    userParticipateQuizzes?: UserParticipateQuizUncheckedUpdateManyWithoutQuizNestedInput
    userQuizScores?: UserQuizScoreUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type QuizCreateManyInput = {
    id?: number
    categoryId: number
    name: string
    type: $Enums.Type
    difficulty: $Enums.Difficulty
    startDate: string
    endDate: string
    createdAt?: Date | string
  }

  export type QuizUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerCreateInput = {
    answer: string
    isCorrect?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserQuestionAnswerInput
    quiz: QuizCreateNestedOneWithoutUserQuestionAnswersInput
    question: QuestionCreateNestedOneWithoutUserQuestionAnswersInput
  }

  export type UserQuestionAnswerUncheckedCreateInput = {
    id?: number
    userId: string
    quizId: number
    questionId: number
    answer: string
    isCorrect?: boolean
    createdAt?: Date | string
  }

  export type UserQuestionAnswerUpdateInput = {
    answer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserQuestionAnswerNestedInput
    quiz?: QuizUpdateOneRequiredWithoutUserQuestionAnswersNestedInput
    question?: QuestionUpdateOneRequiredWithoutUserQuestionAnswersNestedInput
  }

  export type UserQuestionAnswerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    quizId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerCreateManyInput = {
    id?: number
    userId: string
    quizId: number
    questionId: number
    answer: string
    isCorrect?: boolean
    createdAt?: Date | string
  }

  export type UserQuestionAnswerUpdateManyMutationInput = {
    answer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    quizId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserParticipateQuizCreateInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserParticipateQuizInput
    quiz: QuizCreateNestedOneWithoutUserParticipateQuizzesInput
  }

  export type UserParticipateQuizUncheckedCreateInput = {
    id?: number
    userId: string
    quizId: number
    createdAt?: Date | string
  }

  export type UserParticipateQuizUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserParticipateQuizNestedInput
    quiz?: QuizUpdateOneRequiredWithoutUserParticipateQuizzesNestedInput
  }

  export type UserParticipateQuizUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    quizId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserParticipateQuizCreateManyInput = {
    id?: number
    userId: string
    quizId: number
    createdAt?: Date | string
  }

  export type UserParticipateQuizUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserParticipateQuizUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    quizId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuizScoreCreateInput = {
    score: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserQuizScoreInput
    quiz: QuizCreateNestedOneWithoutUserQuizScoresInput
  }

  export type UserQuizScoreUncheckedCreateInput = {
    id?: number
    userId: string
    quizId: number
    score: number
    createdAt?: Date | string
  }

  export type UserQuizScoreUpdateInput = {
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserQuizScoreNestedInput
    quiz?: QuizUpdateOneRequiredWithoutUserQuizScoresNestedInput
  }

  export type UserQuizScoreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    quizId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuizScoreCreateManyInput = {
    id?: number
    userId: string
    quizId: number
    score: number
    createdAt?: Date | string
  }

  export type UserQuizScoreUpdateManyMutationInput = {
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuizScoreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    quizId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type UserQuestionAnswerListRelationFilter = {
    every?: UserQuestionAnswerWhereInput
    some?: UserQuestionAnswerWhereInput
    none?: UserQuestionAnswerWhereInput
  }

  export type UserParticipateQuizListRelationFilter = {
    every?: UserParticipateQuizWhereInput
    some?: UserParticipateQuizWhereInput
    none?: UserParticipateQuizWhereInput
  }

  export type UserQuizScoreListRelationFilter = {
    every?: UserQuizScoreWhereInput
    some?: UserQuizScoreWhereInput
    none?: UserQuizScoreWhereInput
  }

  export type UserQuestionAnswerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserParticipateQuizOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserQuizScoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    role?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    role?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type QuizListRelationFilter = {
    every?: QuizWhereInput
    some?: QuizWhereInput
    none?: QuizWhereInput
  }

  export type QuizOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type QuizNullableRelationFilter = {
    is?: QuizWhereInput | null
    isNot?: QuizWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
    question?: SortOrder
    correctAnswer?: SortOrder
    incorrectAnswers?: SortOrder
    createdAt?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
    question?: SortOrder
    correctAnswer?: SortOrder
    createdAt?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
    question?: SortOrder
    correctAnswer?: SortOrder
    createdAt?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeFilter<$PrismaModel> | $Enums.Type
  }

  export type EnumDifficultyFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyFilter<$PrismaModel> | $Enums.Difficulty
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuizCountOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    difficulty?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type QuizAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type QuizMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    difficulty?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type QuizMinOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    difficulty?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type QuizSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type EnumTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeWithAggregatesFilter<$PrismaModel> | $Enums.Type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeFilter<$PrismaModel>
    _max?: NestedEnumTypeFilter<$PrismaModel>
  }

  export type EnumDifficultyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyWithAggregatesFilter<$PrismaModel> | $Enums.Difficulty
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyFilter<$PrismaModel>
    _max?: NestedEnumDifficultyFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type QuizRelationFilter = {
    is?: QuizWhereInput
    isNot?: QuizWhereInput
  }

  export type QuestionRelationFilter = {
    is?: QuestionWhereInput
    isNot?: QuestionWhereInput
  }

  export type UserQuestionAnswerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    questionId?: SortOrder
    answer?: SortOrder
    isCorrect?: SortOrder
    createdAt?: SortOrder
  }

  export type UserQuestionAnswerAvgOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
    questionId?: SortOrder
  }

  export type UserQuestionAnswerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    questionId?: SortOrder
    answer?: SortOrder
    isCorrect?: SortOrder
    createdAt?: SortOrder
  }

  export type UserQuestionAnswerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    questionId?: SortOrder
    answer?: SortOrder
    isCorrect?: SortOrder
    createdAt?: SortOrder
  }

  export type UserQuestionAnswerSumOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
    questionId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserParticipateQuizCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserParticipateQuizAvgOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
  }

  export type UserParticipateQuizMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserParticipateQuizMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserParticipateQuizSumOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
  }

  export type UserQuizScoreCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
  }

  export type UserQuizScoreAvgOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
    score?: SortOrder
  }

  export type UserQuizScoreMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
  }

  export type UserQuizScoreMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
  }

  export type UserQuizScoreSumOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
    score?: SortOrder
  }

  export type UserQuestionAnswerCreateNestedManyWithoutUserInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput> | UserQuestionAnswerCreateWithoutUserInput[] | UserQuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutUserInput | UserQuestionAnswerCreateOrConnectWithoutUserInput[]
    createMany?: UserQuestionAnswerCreateManyUserInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type UserParticipateQuizCreateNestedManyWithoutUserInput = {
    create?: XOR<UserParticipateQuizCreateWithoutUserInput, UserParticipateQuizUncheckedCreateWithoutUserInput> | UserParticipateQuizCreateWithoutUserInput[] | UserParticipateQuizUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserParticipateQuizCreateOrConnectWithoutUserInput | UserParticipateQuizCreateOrConnectWithoutUserInput[]
    createMany?: UserParticipateQuizCreateManyUserInputEnvelope
    connect?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
  }

  export type UserQuizScoreCreateNestedManyWithoutUserInput = {
    create?: XOR<UserQuizScoreCreateWithoutUserInput, UserQuizScoreUncheckedCreateWithoutUserInput> | UserQuizScoreCreateWithoutUserInput[] | UserQuizScoreUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuizScoreCreateOrConnectWithoutUserInput | UserQuizScoreCreateOrConnectWithoutUserInput[]
    createMany?: UserQuizScoreCreateManyUserInputEnvelope
    connect?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
  }

  export type UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput> | UserQuestionAnswerCreateWithoutUserInput[] | UserQuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutUserInput | UserQuestionAnswerCreateOrConnectWithoutUserInput[]
    createMany?: UserQuestionAnswerCreateManyUserInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type UserParticipateQuizUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserParticipateQuizCreateWithoutUserInput, UserParticipateQuizUncheckedCreateWithoutUserInput> | UserParticipateQuizCreateWithoutUserInput[] | UserParticipateQuizUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserParticipateQuizCreateOrConnectWithoutUserInput | UserParticipateQuizCreateOrConnectWithoutUserInput[]
    createMany?: UserParticipateQuizCreateManyUserInputEnvelope
    connect?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
  }

  export type UserQuizScoreUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserQuizScoreCreateWithoutUserInput, UserQuizScoreUncheckedCreateWithoutUserInput> | UserQuizScoreCreateWithoutUserInput[] | UserQuizScoreUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuizScoreCreateOrConnectWithoutUserInput | UserQuizScoreCreateOrConnectWithoutUserInput[]
    createMany?: UserQuizScoreCreateManyUserInputEnvelope
    connect?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type UserQuestionAnswerUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput> | UserQuestionAnswerCreateWithoutUserInput[] | UserQuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutUserInput | UserQuestionAnswerCreateOrConnectWithoutUserInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutUserInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserQuestionAnswerCreateManyUserInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutUserInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutUserInput | UserQuestionAnswerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type UserParticipateQuizUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserParticipateQuizCreateWithoutUserInput, UserParticipateQuizUncheckedCreateWithoutUserInput> | UserParticipateQuizCreateWithoutUserInput[] | UserParticipateQuizUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserParticipateQuizCreateOrConnectWithoutUserInput | UserParticipateQuizCreateOrConnectWithoutUserInput[]
    upsert?: UserParticipateQuizUpsertWithWhereUniqueWithoutUserInput | UserParticipateQuizUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserParticipateQuizCreateManyUserInputEnvelope
    set?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
    disconnect?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
    delete?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
    connect?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
    update?: UserParticipateQuizUpdateWithWhereUniqueWithoutUserInput | UserParticipateQuizUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserParticipateQuizUpdateManyWithWhereWithoutUserInput | UserParticipateQuizUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserParticipateQuizScalarWhereInput | UserParticipateQuizScalarWhereInput[]
  }

  export type UserQuizScoreUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserQuizScoreCreateWithoutUserInput, UserQuizScoreUncheckedCreateWithoutUserInput> | UserQuizScoreCreateWithoutUserInput[] | UserQuizScoreUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuizScoreCreateOrConnectWithoutUserInput | UserQuizScoreCreateOrConnectWithoutUserInput[]
    upsert?: UserQuizScoreUpsertWithWhereUniqueWithoutUserInput | UserQuizScoreUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserQuizScoreCreateManyUserInputEnvelope
    set?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
    disconnect?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
    delete?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
    connect?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
    update?: UserQuizScoreUpdateWithWhereUniqueWithoutUserInput | UserQuizScoreUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserQuizScoreUpdateManyWithWhereWithoutUserInput | UserQuizScoreUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserQuizScoreScalarWhereInput | UserQuizScoreScalarWhereInput[]
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput> | UserQuestionAnswerCreateWithoutUserInput[] | UserQuestionAnswerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutUserInput | UserQuestionAnswerCreateOrConnectWithoutUserInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutUserInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserQuestionAnswerCreateManyUserInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutUserInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutUserInput | UserQuestionAnswerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type UserParticipateQuizUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserParticipateQuizCreateWithoutUserInput, UserParticipateQuizUncheckedCreateWithoutUserInput> | UserParticipateQuizCreateWithoutUserInput[] | UserParticipateQuizUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserParticipateQuizCreateOrConnectWithoutUserInput | UserParticipateQuizCreateOrConnectWithoutUserInput[]
    upsert?: UserParticipateQuizUpsertWithWhereUniqueWithoutUserInput | UserParticipateQuizUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserParticipateQuizCreateManyUserInputEnvelope
    set?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
    disconnect?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
    delete?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
    connect?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
    update?: UserParticipateQuizUpdateWithWhereUniqueWithoutUserInput | UserParticipateQuizUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserParticipateQuizUpdateManyWithWhereWithoutUserInput | UserParticipateQuizUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserParticipateQuizScalarWhereInput | UserParticipateQuizScalarWhereInput[]
  }

  export type UserQuizScoreUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserQuizScoreCreateWithoutUserInput, UserQuizScoreUncheckedCreateWithoutUserInput> | UserQuizScoreCreateWithoutUserInput[] | UserQuizScoreUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserQuizScoreCreateOrConnectWithoutUserInput | UserQuizScoreCreateOrConnectWithoutUserInput[]
    upsert?: UserQuizScoreUpsertWithWhereUniqueWithoutUserInput | UserQuizScoreUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserQuizScoreCreateManyUserInputEnvelope
    set?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
    disconnect?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
    delete?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
    connect?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
    update?: UserQuizScoreUpdateWithWhereUniqueWithoutUserInput | UserQuizScoreUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserQuizScoreUpdateManyWithWhereWithoutUserInput | UserQuizScoreUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserQuizScoreScalarWhereInput | UserQuizScoreScalarWhereInput[]
  }

  export type QuizCreateNestedManyWithoutCategoryInput = {
    create?: XOR<QuizCreateWithoutCategoryInput, QuizUncheckedCreateWithoutCategoryInput> | QuizCreateWithoutCategoryInput[] | QuizUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutCategoryInput | QuizCreateOrConnectWithoutCategoryInput[]
    createMany?: QuizCreateManyCategoryInputEnvelope
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
  }

  export type QuizUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<QuizCreateWithoutCategoryInput, QuizUncheckedCreateWithoutCategoryInput> | QuizCreateWithoutCategoryInput[] | QuizUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutCategoryInput | QuizCreateOrConnectWithoutCategoryInput[]
    createMany?: QuizCreateManyCategoryInputEnvelope
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type QuizUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<QuizCreateWithoutCategoryInput, QuizUncheckedCreateWithoutCategoryInput> | QuizCreateWithoutCategoryInput[] | QuizUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutCategoryInput | QuizCreateOrConnectWithoutCategoryInput[]
    upsert?: QuizUpsertWithWhereUniqueWithoutCategoryInput | QuizUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: QuizCreateManyCategoryInputEnvelope
    set?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    disconnect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    delete?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    update?: QuizUpdateWithWhereUniqueWithoutCategoryInput | QuizUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: QuizUpdateManyWithWhereWithoutCategoryInput | QuizUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: QuizScalarWhereInput | QuizScalarWhereInput[]
  }

  export type QuizUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<QuizCreateWithoutCategoryInput, QuizUncheckedCreateWithoutCategoryInput> | QuizCreateWithoutCategoryInput[] | QuizUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutCategoryInput | QuizCreateOrConnectWithoutCategoryInput[]
    upsert?: QuizUpsertWithWhereUniqueWithoutCategoryInput | QuizUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: QuizCreateManyCategoryInputEnvelope
    set?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    disconnect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    delete?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    update?: QuizUpdateWithWhereUniqueWithoutCategoryInput | QuizUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: QuizUpdateManyWithWhereWithoutCategoryInput | QuizUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: QuizScalarWhereInput | QuizScalarWhereInput[]
  }

  export type QuestionCreateincorrectAnswersInput = {
    set: string[]
  }

  export type UserQuestionAnswerCreateNestedManyWithoutQuestionInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput> | UserQuestionAnswerCreateWithoutQuestionInput[] | UserQuestionAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuestionInput | UserQuestionAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: UserQuestionAnswerCreateManyQuestionInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type QuizCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<QuizCreateWithoutQuestionsInput, QuizUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: QuizCreateOrConnectWithoutQuestionsInput
    connect?: QuizWhereUniqueInput
  }

  export type UserQuestionAnswerUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput> | UserQuestionAnswerCreateWithoutQuestionInput[] | UserQuestionAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuestionInput | UserQuestionAnswerCreateOrConnectWithoutQuestionInput[]
    createMany?: UserQuestionAnswerCreateManyQuestionInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type QuestionUpdateincorrectAnswersInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserQuestionAnswerUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput> | UserQuestionAnswerCreateWithoutQuestionInput[] | UserQuestionAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuestionInput | UserQuestionAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: UserQuestionAnswerCreateManyQuestionInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutQuestionInput | UserQuestionAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type QuizUpdateOneWithoutQuestionsNestedInput = {
    create?: XOR<QuizCreateWithoutQuestionsInput, QuizUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: QuizCreateOrConnectWithoutQuestionsInput
    upsert?: QuizUpsertWithoutQuestionsInput
    disconnect?: QuizWhereInput | boolean
    delete?: QuizWhereInput | boolean
    connect?: QuizWhereUniqueInput
    update?: XOR<XOR<QuizUpdateToOneWithWhereWithoutQuestionsInput, QuizUpdateWithoutQuestionsInput>, QuizUncheckedUpdateWithoutQuestionsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput> | UserQuestionAnswerCreateWithoutQuestionInput[] | UserQuestionAnswerUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuestionInput | UserQuestionAnswerCreateOrConnectWithoutQuestionInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: UserQuestionAnswerCreateManyQuestionInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutQuestionInput | UserQuestionAnswerUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type QuestionCreateNestedManyWithoutQuizInput = {
    create?: XOR<QuestionCreateWithoutQuizInput, QuestionUncheckedCreateWithoutQuizInput> | QuestionCreateWithoutQuizInput[] | QuestionUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuizInput | QuestionCreateOrConnectWithoutQuizInput[]
    createMany?: QuestionCreateManyQuizInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type UserQuestionAnswerCreateNestedManyWithoutQuizInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuizInput, UserQuestionAnswerUncheckedCreateWithoutQuizInput> | UserQuestionAnswerCreateWithoutQuizInput[] | UserQuestionAnswerUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuizInput | UserQuestionAnswerCreateOrConnectWithoutQuizInput[]
    createMany?: UserQuestionAnswerCreateManyQuizInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type UserParticipateQuizCreateNestedManyWithoutQuizInput = {
    create?: XOR<UserParticipateQuizCreateWithoutQuizInput, UserParticipateQuizUncheckedCreateWithoutQuizInput> | UserParticipateQuizCreateWithoutQuizInput[] | UserParticipateQuizUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: UserParticipateQuizCreateOrConnectWithoutQuizInput | UserParticipateQuizCreateOrConnectWithoutQuizInput[]
    createMany?: UserParticipateQuizCreateManyQuizInputEnvelope
    connect?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
  }

  export type UserQuizScoreCreateNestedManyWithoutQuizInput = {
    create?: XOR<UserQuizScoreCreateWithoutQuizInput, UserQuizScoreUncheckedCreateWithoutQuizInput> | UserQuizScoreCreateWithoutQuizInput[] | UserQuizScoreUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: UserQuizScoreCreateOrConnectWithoutQuizInput | UserQuizScoreCreateOrConnectWithoutQuizInput[]
    createMany?: UserQuizScoreCreateManyQuizInputEnvelope
    connect?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
  }

  export type CategoryCreateNestedOneWithoutQuizzesInput = {
    create?: XOR<CategoryCreateWithoutQuizzesInput, CategoryUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutQuizzesInput
    connect?: CategoryWhereUniqueInput
  }

  export type QuestionUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<QuestionCreateWithoutQuizInput, QuestionUncheckedCreateWithoutQuizInput> | QuestionCreateWithoutQuizInput[] | QuestionUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuizInput | QuestionCreateOrConnectWithoutQuizInput[]
    createMany?: QuestionCreateManyQuizInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type UserQuestionAnswerUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuizInput, UserQuestionAnswerUncheckedCreateWithoutQuizInput> | UserQuestionAnswerCreateWithoutQuizInput[] | UserQuestionAnswerUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuizInput | UserQuestionAnswerCreateOrConnectWithoutQuizInput[]
    createMany?: UserQuestionAnswerCreateManyQuizInputEnvelope
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
  }

  export type UserParticipateQuizUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<UserParticipateQuizCreateWithoutQuizInput, UserParticipateQuizUncheckedCreateWithoutQuizInput> | UserParticipateQuizCreateWithoutQuizInput[] | UserParticipateQuizUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: UserParticipateQuizCreateOrConnectWithoutQuizInput | UserParticipateQuizCreateOrConnectWithoutQuizInput[]
    createMany?: UserParticipateQuizCreateManyQuizInputEnvelope
    connect?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
  }

  export type UserQuizScoreUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<UserQuizScoreCreateWithoutQuizInput, UserQuizScoreUncheckedCreateWithoutQuizInput> | UserQuizScoreCreateWithoutQuizInput[] | UserQuizScoreUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: UserQuizScoreCreateOrConnectWithoutQuizInput | UserQuizScoreCreateOrConnectWithoutQuizInput[]
    createMany?: UserQuizScoreCreateManyQuizInputEnvelope
    connect?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
  }

  export type EnumTypeFieldUpdateOperationsInput = {
    set?: $Enums.Type
  }

  export type EnumDifficultyFieldUpdateOperationsInput = {
    set?: $Enums.Difficulty
  }

  export type QuestionUpdateManyWithoutQuizNestedInput = {
    create?: XOR<QuestionCreateWithoutQuizInput, QuestionUncheckedCreateWithoutQuizInput> | QuestionCreateWithoutQuizInput[] | QuestionUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuizInput | QuestionCreateOrConnectWithoutQuizInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutQuizInput | QuestionUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: QuestionCreateManyQuizInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutQuizInput | QuestionUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutQuizInput | QuestionUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type UserQuestionAnswerUpdateManyWithoutQuizNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuizInput, UserQuestionAnswerUncheckedCreateWithoutQuizInput> | UserQuestionAnswerCreateWithoutQuizInput[] | UserQuestionAnswerUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuizInput | UserQuestionAnswerCreateOrConnectWithoutQuizInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutQuizInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: UserQuestionAnswerCreateManyQuizInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutQuizInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutQuizInput | UserQuestionAnswerUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type UserParticipateQuizUpdateManyWithoutQuizNestedInput = {
    create?: XOR<UserParticipateQuizCreateWithoutQuizInput, UserParticipateQuizUncheckedCreateWithoutQuizInput> | UserParticipateQuizCreateWithoutQuizInput[] | UserParticipateQuizUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: UserParticipateQuizCreateOrConnectWithoutQuizInput | UserParticipateQuizCreateOrConnectWithoutQuizInput[]
    upsert?: UserParticipateQuizUpsertWithWhereUniqueWithoutQuizInput | UserParticipateQuizUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: UserParticipateQuizCreateManyQuizInputEnvelope
    set?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
    disconnect?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
    delete?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
    connect?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
    update?: UserParticipateQuizUpdateWithWhereUniqueWithoutQuizInput | UserParticipateQuizUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: UserParticipateQuizUpdateManyWithWhereWithoutQuizInput | UserParticipateQuizUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: UserParticipateQuizScalarWhereInput | UserParticipateQuizScalarWhereInput[]
  }

  export type UserQuizScoreUpdateManyWithoutQuizNestedInput = {
    create?: XOR<UserQuizScoreCreateWithoutQuizInput, UserQuizScoreUncheckedCreateWithoutQuizInput> | UserQuizScoreCreateWithoutQuizInput[] | UserQuizScoreUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: UserQuizScoreCreateOrConnectWithoutQuizInput | UserQuizScoreCreateOrConnectWithoutQuizInput[]
    upsert?: UserQuizScoreUpsertWithWhereUniqueWithoutQuizInput | UserQuizScoreUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: UserQuizScoreCreateManyQuizInputEnvelope
    set?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
    disconnect?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
    delete?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
    connect?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
    update?: UserQuizScoreUpdateWithWhereUniqueWithoutQuizInput | UserQuizScoreUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: UserQuizScoreUpdateManyWithWhereWithoutQuizInput | UserQuizScoreUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: UserQuizScoreScalarWhereInput | UserQuizScoreScalarWhereInput[]
  }

  export type CategoryUpdateOneRequiredWithoutQuizzesNestedInput = {
    create?: XOR<CategoryCreateWithoutQuizzesInput, CategoryUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutQuizzesInput
    upsert?: CategoryUpsertWithoutQuizzesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutQuizzesInput, CategoryUpdateWithoutQuizzesInput>, CategoryUncheckedUpdateWithoutQuizzesInput>
  }

  export type QuestionUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<QuestionCreateWithoutQuizInput, QuestionUncheckedCreateWithoutQuizInput> | QuestionCreateWithoutQuizInput[] | QuestionUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuizInput | QuestionCreateOrConnectWithoutQuizInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutQuizInput | QuestionUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: QuestionCreateManyQuizInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutQuizInput | QuestionUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutQuizInput | QuestionUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<UserQuestionAnswerCreateWithoutQuizInput, UserQuestionAnswerUncheckedCreateWithoutQuizInput> | UserQuestionAnswerCreateWithoutQuizInput[] | UserQuestionAnswerUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: UserQuestionAnswerCreateOrConnectWithoutQuizInput | UserQuestionAnswerCreateOrConnectWithoutQuizInput[]
    upsert?: UserQuestionAnswerUpsertWithWhereUniqueWithoutQuizInput | UserQuestionAnswerUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: UserQuestionAnswerCreateManyQuizInputEnvelope
    set?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    disconnect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    delete?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    connect?: UserQuestionAnswerWhereUniqueInput | UserQuestionAnswerWhereUniqueInput[]
    update?: UserQuestionAnswerUpdateWithWhereUniqueWithoutQuizInput | UserQuestionAnswerUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: UserQuestionAnswerUpdateManyWithWhereWithoutQuizInput | UserQuestionAnswerUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
  }

  export type UserParticipateQuizUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<UserParticipateQuizCreateWithoutQuizInput, UserParticipateQuizUncheckedCreateWithoutQuizInput> | UserParticipateQuizCreateWithoutQuizInput[] | UserParticipateQuizUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: UserParticipateQuizCreateOrConnectWithoutQuizInput | UserParticipateQuizCreateOrConnectWithoutQuizInput[]
    upsert?: UserParticipateQuizUpsertWithWhereUniqueWithoutQuizInput | UserParticipateQuizUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: UserParticipateQuizCreateManyQuizInputEnvelope
    set?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
    disconnect?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
    delete?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
    connect?: UserParticipateQuizWhereUniqueInput | UserParticipateQuizWhereUniqueInput[]
    update?: UserParticipateQuizUpdateWithWhereUniqueWithoutQuizInput | UserParticipateQuizUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: UserParticipateQuizUpdateManyWithWhereWithoutQuizInput | UserParticipateQuizUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: UserParticipateQuizScalarWhereInput | UserParticipateQuizScalarWhereInput[]
  }

  export type UserQuizScoreUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<UserQuizScoreCreateWithoutQuizInput, UserQuizScoreUncheckedCreateWithoutQuizInput> | UserQuizScoreCreateWithoutQuizInput[] | UserQuizScoreUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: UserQuizScoreCreateOrConnectWithoutQuizInput | UserQuizScoreCreateOrConnectWithoutQuizInput[]
    upsert?: UserQuizScoreUpsertWithWhereUniqueWithoutQuizInput | UserQuizScoreUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: UserQuizScoreCreateManyQuizInputEnvelope
    set?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
    disconnect?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
    delete?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
    connect?: UserQuizScoreWhereUniqueInput | UserQuizScoreWhereUniqueInput[]
    update?: UserQuizScoreUpdateWithWhereUniqueWithoutQuizInput | UserQuizScoreUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: UserQuizScoreUpdateManyWithWhereWithoutQuizInput | UserQuizScoreUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: UserQuizScoreScalarWhereInput | UserQuizScoreScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserQuestionAnswerInput = {
    create?: XOR<UserCreateWithoutUserQuestionAnswerInput, UserUncheckedCreateWithoutUserQuestionAnswerInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserQuestionAnswerInput
    connect?: UserWhereUniqueInput
  }

  export type QuizCreateNestedOneWithoutUserQuestionAnswersInput = {
    create?: XOR<QuizCreateWithoutUserQuestionAnswersInput, QuizUncheckedCreateWithoutUserQuestionAnswersInput>
    connectOrCreate?: QuizCreateOrConnectWithoutUserQuestionAnswersInput
    connect?: QuizWhereUniqueInput
  }

  export type QuestionCreateNestedOneWithoutUserQuestionAnswersInput = {
    create?: XOR<QuestionCreateWithoutUserQuestionAnswersInput, QuestionUncheckedCreateWithoutUserQuestionAnswersInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutUserQuestionAnswersInput
    connect?: QuestionWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutUserQuestionAnswerNestedInput = {
    create?: XOR<UserCreateWithoutUserQuestionAnswerInput, UserUncheckedCreateWithoutUserQuestionAnswerInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserQuestionAnswerInput
    upsert?: UserUpsertWithoutUserQuestionAnswerInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserQuestionAnswerInput, UserUpdateWithoutUserQuestionAnswerInput>, UserUncheckedUpdateWithoutUserQuestionAnswerInput>
  }

  export type QuizUpdateOneRequiredWithoutUserQuestionAnswersNestedInput = {
    create?: XOR<QuizCreateWithoutUserQuestionAnswersInput, QuizUncheckedCreateWithoutUserQuestionAnswersInput>
    connectOrCreate?: QuizCreateOrConnectWithoutUserQuestionAnswersInput
    upsert?: QuizUpsertWithoutUserQuestionAnswersInput
    connect?: QuizWhereUniqueInput
    update?: XOR<XOR<QuizUpdateToOneWithWhereWithoutUserQuestionAnswersInput, QuizUpdateWithoutUserQuestionAnswersInput>, QuizUncheckedUpdateWithoutUserQuestionAnswersInput>
  }

  export type QuestionUpdateOneRequiredWithoutUserQuestionAnswersNestedInput = {
    create?: XOR<QuestionCreateWithoutUserQuestionAnswersInput, QuestionUncheckedCreateWithoutUserQuestionAnswersInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutUserQuestionAnswersInput
    upsert?: QuestionUpsertWithoutUserQuestionAnswersInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutUserQuestionAnswersInput, QuestionUpdateWithoutUserQuestionAnswersInput>, QuestionUncheckedUpdateWithoutUserQuestionAnswersInput>
  }

  export type UserCreateNestedOneWithoutUserParticipateQuizInput = {
    create?: XOR<UserCreateWithoutUserParticipateQuizInput, UserUncheckedCreateWithoutUserParticipateQuizInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserParticipateQuizInput
    connect?: UserWhereUniqueInput
  }

  export type QuizCreateNestedOneWithoutUserParticipateQuizzesInput = {
    create?: XOR<QuizCreateWithoutUserParticipateQuizzesInput, QuizUncheckedCreateWithoutUserParticipateQuizzesInput>
    connectOrCreate?: QuizCreateOrConnectWithoutUserParticipateQuizzesInput
    connect?: QuizWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserParticipateQuizNestedInput = {
    create?: XOR<UserCreateWithoutUserParticipateQuizInput, UserUncheckedCreateWithoutUserParticipateQuizInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserParticipateQuizInput
    upsert?: UserUpsertWithoutUserParticipateQuizInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserParticipateQuizInput, UserUpdateWithoutUserParticipateQuizInput>, UserUncheckedUpdateWithoutUserParticipateQuizInput>
  }

  export type QuizUpdateOneRequiredWithoutUserParticipateQuizzesNestedInput = {
    create?: XOR<QuizCreateWithoutUserParticipateQuizzesInput, QuizUncheckedCreateWithoutUserParticipateQuizzesInput>
    connectOrCreate?: QuizCreateOrConnectWithoutUserParticipateQuizzesInput
    upsert?: QuizUpsertWithoutUserParticipateQuizzesInput
    connect?: QuizWhereUniqueInput
    update?: XOR<XOR<QuizUpdateToOneWithWhereWithoutUserParticipateQuizzesInput, QuizUpdateWithoutUserParticipateQuizzesInput>, QuizUncheckedUpdateWithoutUserParticipateQuizzesInput>
  }

  export type UserCreateNestedOneWithoutUserQuizScoreInput = {
    create?: XOR<UserCreateWithoutUserQuizScoreInput, UserUncheckedCreateWithoutUserQuizScoreInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserQuizScoreInput
    connect?: UserWhereUniqueInput
  }

  export type QuizCreateNestedOneWithoutUserQuizScoresInput = {
    create?: XOR<QuizCreateWithoutUserQuizScoresInput, QuizUncheckedCreateWithoutUserQuizScoresInput>
    connectOrCreate?: QuizCreateOrConnectWithoutUserQuizScoresInput
    connect?: QuizWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserQuizScoreNestedInput = {
    create?: XOR<UserCreateWithoutUserQuizScoreInput, UserUncheckedCreateWithoutUserQuizScoreInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserQuizScoreInput
    upsert?: UserUpsertWithoutUserQuizScoreInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserQuizScoreInput, UserUpdateWithoutUserQuizScoreInput>, UserUncheckedUpdateWithoutUserQuizScoreInput>
  }

  export type QuizUpdateOneRequiredWithoutUserQuizScoresNestedInput = {
    create?: XOR<QuizCreateWithoutUserQuizScoresInput, QuizUncheckedCreateWithoutUserQuizScoresInput>
    connectOrCreate?: QuizCreateOrConnectWithoutUserQuizScoresInput
    upsert?: QuizUpsertWithoutUserQuizScoresInput
    connect?: QuizWhereUniqueInput
    update?: XOR<XOR<QuizUpdateToOneWithWhereWithoutUserQuizScoresInput, QuizUpdateWithoutUserQuizScoresInput>, QuizUncheckedUpdateWithoutUserQuizScoresInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeFilter<$PrismaModel> | $Enums.Type
  }

  export type NestedEnumDifficultyFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyFilter<$PrismaModel> | $Enums.Difficulty
  }

  export type NestedEnumTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel>
    in?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeWithAggregatesFilter<$PrismaModel> | $Enums.Type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeFilter<$PrismaModel>
    _max?: NestedEnumTypeFilter<$PrismaModel>
  }

  export type NestedEnumDifficultyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyWithAggregatesFilter<$PrismaModel> | $Enums.Difficulty
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyFilter<$PrismaModel>
    _max?: NestedEnumDifficultyFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserQuestionAnswerCreateWithoutUserInput = {
    answer: string
    isCorrect?: boolean
    createdAt?: Date | string
    quiz: QuizCreateNestedOneWithoutUserQuestionAnswersInput
    question: QuestionCreateNestedOneWithoutUserQuestionAnswersInput
  }

  export type UserQuestionAnswerUncheckedCreateWithoutUserInput = {
    id?: number
    quizId: number
    questionId: number
    answer: string
    isCorrect?: boolean
    createdAt?: Date | string
  }

  export type UserQuestionAnswerCreateOrConnectWithoutUserInput = {
    where: UserQuestionAnswerWhereUniqueInput
    create: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput>
  }

  export type UserQuestionAnswerCreateManyUserInputEnvelope = {
    data: UserQuestionAnswerCreateManyUserInput | UserQuestionAnswerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserParticipateQuizCreateWithoutUserInput = {
    createdAt?: Date | string
    quiz: QuizCreateNestedOneWithoutUserParticipateQuizzesInput
  }

  export type UserParticipateQuizUncheckedCreateWithoutUserInput = {
    id?: number
    quizId: number
    createdAt?: Date | string
  }

  export type UserParticipateQuizCreateOrConnectWithoutUserInput = {
    where: UserParticipateQuizWhereUniqueInput
    create: XOR<UserParticipateQuizCreateWithoutUserInput, UserParticipateQuizUncheckedCreateWithoutUserInput>
  }

  export type UserParticipateQuizCreateManyUserInputEnvelope = {
    data: UserParticipateQuizCreateManyUserInput | UserParticipateQuizCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserQuizScoreCreateWithoutUserInput = {
    score: number
    createdAt?: Date | string
    quiz: QuizCreateNestedOneWithoutUserQuizScoresInput
  }

  export type UserQuizScoreUncheckedCreateWithoutUserInput = {
    id?: number
    quizId: number
    score: number
    createdAt?: Date | string
  }

  export type UserQuizScoreCreateOrConnectWithoutUserInput = {
    where: UserQuizScoreWhereUniqueInput
    create: XOR<UserQuizScoreCreateWithoutUserInput, UserQuizScoreUncheckedCreateWithoutUserInput>
  }

  export type UserQuizScoreCreateManyUserInputEnvelope = {
    data: UserQuizScoreCreateManyUserInput | UserQuizScoreCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserQuestionAnswerUpsertWithWhereUniqueWithoutUserInput = {
    where: UserQuestionAnswerWhereUniqueInput
    update: XOR<UserQuestionAnswerUpdateWithoutUserInput, UserQuestionAnswerUncheckedUpdateWithoutUserInput>
    create: XOR<UserQuestionAnswerCreateWithoutUserInput, UserQuestionAnswerUncheckedCreateWithoutUserInput>
  }

  export type UserQuestionAnswerUpdateWithWhereUniqueWithoutUserInput = {
    where: UserQuestionAnswerWhereUniqueInput
    data: XOR<UserQuestionAnswerUpdateWithoutUserInput, UserQuestionAnswerUncheckedUpdateWithoutUserInput>
  }

  export type UserQuestionAnswerUpdateManyWithWhereWithoutUserInput = {
    where: UserQuestionAnswerScalarWhereInput
    data: XOR<UserQuestionAnswerUpdateManyMutationInput, UserQuestionAnswerUncheckedUpdateManyWithoutUserInput>
  }

  export type UserQuestionAnswerScalarWhereInput = {
    AND?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
    OR?: UserQuestionAnswerScalarWhereInput[]
    NOT?: UserQuestionAnswerScalarWhereInput | UserQuestionAnswerScalarWhereInput[]
    id?: IntFilter<"UserQuestionAnswer"> | number
    userId?: StringFilter<"UserQuestionAnswer"> | string
    quizId?: IntFilter<"UserQuestionAnswer"> | number
    questionId?: IntFilter<"UserQuestionAnswer"> | number
    answer?: StringFilter<"UserQuestionAnswer"> | string
    isCorrect?: BoolFilter<"UserQuestionAnswer"> | boolean
    createdAt?: DateTimeFilter<"UserQuestionAnswer"> | Date | string
  }

  export type UserParticipateQuizUpsertWithWhereUniqueWithoutUserInput = {
    where: UserParticipateQuizWhereUniqueInput
    update: XOR<UserParticipateQuizUpdateWithoutUserInput, UserParticipateQuizUncheckedUpdateWithoutUserInput>
    create: XOR<UserParticipateQuizCreateWithoutUserInput, UserParticipateQuizUncheckedCreateWithoutUserInput>
  }

  export type UserParticipateQuizUpdateWithWhereUniqueWithoutUserInput = {
    where: UserParticipateQuizWhereUniqueInput
    data: XOR<UserParticipateQuizUpdateWithoutUserInput, UserParticipateQuizUncheckedUpdateWithoutUserInput>
  }

  export type UserParticipateQuizUpdateManyWithWhereWithoutUserInput = {
    where: UserParticipateQuizScalarWhereInput
    data: XOR<UserParticipateQuizUpdateManyMutationInput, UserParticipateQuizUncheckedUpdateManyWithoutUserInput>
  }

  export type UserParticipateQuizScalarWhereInput = {
    AND?: UserParticipateQuizScalarWhereInput | UserParticipateQuizScalarWhereInput[]
    OR?: UserParticipateQuizScalarWhereInput[]
    NOT?: UserParticipateQuizScalarWhereInput | UserParticipateQuizScalarWhereInput[]
    id?: IntFilter<"UserParticipateQuiz"> | number
    userId?: StringFilter<"UserParticipateQuiz"> | string
    quizId?: IntFilter<"UserParticipateQuiz"> | number
    createdAt?: DateTimeFilter<"UserParticipateQuiz"> | Date | string
  }

  export type UserQuizScoreUpsertWithWhereUniqueWithoutUserInput = {
    where: UserQuizScoreWhereUniqueInput
    update: XOR<UserQuizScoreUpdateWithoutUserInput, UserQuizScoreUncheckedUpdateWithoutUserInput>
    create: XOR<UserQuizScoreCreateWithoutUserInput, UserQuizScoreUncheckedCreateWithoutUserInput>
  }

  export type UserQuizScoreUpdateWithWhereUniqueWithoutUserInput = {
    where: UserQuizScoreWhereUniqueInput
    data: XOR<UserQuizScoreUpdateWithoutUserInput, UserQuizScoreUncheckedUpdateWithoutUserInput>
  }

  export type UserQuizScoreUpdateManyWithWhereWithoutUserInput = {
    where: UserQuizScoreScalarWhereInput
    data: XOR<UserQuizScoreUpdateManyMutationInput, UserQuizScoreUncheckedUpdateManyWithoutUserInput>
  }

  export type UserQuizScoreScalarWhereInput = {
    AND?: UserQuizScoreScalarWhereInput | UserQuizScoreScalarWhereInput[]
    OR?: UserQuizScoreScalarWhereInput[]
    NOT?: UserQuizScoreScalarWhereInput | UserQuizScoreScalarWhereInput[]
    id?: IntFilter<"UserQuizScore"> | number
    userId?: StringFilter<"UserQuizScore"> | string
    quizId?: IntFilter<"UserQuizScore"> | number
    score?: IntFilter<"UserQuizScore"> | number
    createdAt?: DateTimeFilter<"UserQuizScore"> | Date | string
  }

  export type QuizCreateWithoutCategoryInput = {
    name: string
    type: $Enums.Type
    difficulty: $Enums.Difficulty
    startDate: string
    endDate: string
    createdAt?: Date | string
    questions?: QuestionCreateNestedManyWithoutQuizInput
    userQuestionAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuizInput
    userParticipateQuizzes?: UserParticipateQuizCreateNestedManyWithoutQuizInput
    userQuizScores?: UserQuizScoreCreateNestedManyWithoutQuizInput
  }

  export type QuizUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    type: $Enums.Type
    difficulty: $Enums.Difficulty
    startDate: string
    endDate: string
    createdAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutQuizInput
    userQuestionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuizInput
    userParticipateQuizzes?: UserParticipateQuizUncheckedCreateNestedManyWithoutQuizInput
    userQuizScores?: UserQuizScoreUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizCreateOrConnectWithoutCategoryInput = {
    where: QuizWhereUniqueInput
    create: XOR<QuizCreateWithoutCategoryInput, QuizUncheckedCreateWithoutCategoryInput>
  }

  export type QuizCreateManyCategoryInputEnvelope = {
    data: QuizCreateManyCategoryInput | QuizCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type QuizUpsertWithWhereUniqueWithoutCategoryInput = {
    where: QuizWhereUniqueInput
    update: XOR<QuizUpdateWithoutCategoryInput, QuizUncheckedUpdateWithoutCategoryInput>
    create: XOR<QuizCreateWithoutCategoryInput, QuizUncheckedCreateWithoutCategoryInput>
  }

  export type QuizUpdateWithWhereUniqueWithoutCategoryInput = {
    where: QuizWhereUniqueInput
    data: XOR<QuizUpdateWithoutCategoryInput, QuizUncheckedUpdateWithoutCategoryInput>
  }

  export type QuizUpdateManyWithWhereWithoutCategoryInput = {
    where: QuizScalarWhereInput
    data: XOR<QuizUpdateManyMutationInput, QuizUncheckedUpdateManyWithoutCategoryInput>
  }

  export type QuizScalarWhereInput = {
    AND?: QuizScalarWhereInput | QuizScalarWhereInput[]
    OR?: QuizScalarWhereInput[]
    NOT?: QuizScalarWhereInput | QuizScalarWhereInput[]
    id?: IntFilter<"Quiz"> | number
    categoryId?: IntFilter<"Quiz"> | number
    name?: StringFilter<"Quiz"> | string
    type?: EnumTypeFilter<"Quiz"> | $Enums.Type
    difficulty?: EnumDifficultyFilter<"Quiz"> | $Enums.Difficulty
    startDate?: StringFilter<"Quiz"> | string
    endDate?: StringFilter<"Quiz"> | string
    createdAt?: DateTimeFilter<"Quiz"> | Date | string
  }

  export type UserQuestionAnswerCreateWithoutQuestionInput = {
    answer: string
    isCorrect?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserQuestionAnswerInput
    quiz: QuizCreateNestedOneWithoutUserQuestionAnswersInput
  }

  export type UserQuestionAnswerUncheckedCreateWithoutQuestionInput = {
    id?: number
    userId: string
    quizId: number
    answer: string
    isCorrect?: boolean
    createdAt?: Date | string
  }

  export type UserQuestionAnswerCreateOrConnectWithoutQuestionInput = {
    where: UserQuestionAnswerWhereUniqueInput
    create: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type UserQuestionAnswerCreateManyQuestionInputEnvelope = {
    data: UserQuestionAnswerCreateManyQuestionInput | UserQuestionAnswerCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type QuizCreateWithoutQuestionsInput = {
    name: string
    type: $Enums.Type
    difficulty: $Enums.Difficulty
    startDate: string
    endDate: string
    createdAt?: Date | string
    userQuestionAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuizInput
    userParticipateQuizzes?: UserParticipateQuizCreateNestedManyWithoutQuizInput
    userQuizScores?: UserQuizScoreCreateNestedManyWithoutQuizInput
    category: CategoryCreateNestedOneWithoutQuizzesInput
  }

  export type QuizUncheckedCreateWithoutQuestionsInput = {
    id?: number
    categoryId: number
    name: string
    type: $Enums.Type
    difficulty: $Enums.Difficulty
    startDate: string
    endDate: string
    createdAt?: Date | string
    userQuestionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuizInput
    userParticipateQuizzes?: UserParticipateQuizUncheckedCreateNestedManyWithoutQuizInput
    userQuizScores?: UserQuizScoreUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizCreateOrConnectWithoutQuestionsInput = {
    where: QuizWhereUniqueInput
    create: XOR<QuizCreateWithoutQuestionsInput, QuizUncheckedCreateWithoutQuestionsInput>
  }

  export type UserQuestionAnswerUpsertWithWhereUniqueWithoutQuestionInput = {
    where: UserQuestionAnswerWhereUniqueInput
    update: XOR<UserQuestionAnswerUpdateWithoutQuestionInput, UserQuestionAnswerUncheckedUpdateWithoutQuestionInput>
    create: XOR<UserQuestionAnswerCreateWithoutQuestionInput, UserQuestionAnswerUncheckedCreateWithoutQuestionInput>
  }

  export type UserQuestionAnswerUpdateWithWhereUniqueWithoutQuestionInput = {
    where: UserQuestionAnswerWhereUniqueInput
    data: XOR<UserQuestionAnswerUpdateWithoutQuestionInput, UserQuestionAnswerUncheckedUpdateWithoutQuestionInput>
  }

  export type UserQuestionAnswerUpdateManyWithWhereWithoutQuestionInput = {
    where: UserQuestionAnswerScalarWhereInput
    data: XOR<UserQuestionAnswerUpdateManyMutationInput, UserQuestionAnswerUncheckedUpdateManyWithoutQuestionInput>
  }

  export type QuizUpsertWithoutQuestionsInput = {
    update: XOR<QuizUpdateWithoutQuestionsInput, QuizUncheckedUpdateWithoutQuestionsInput>
    create: XOR<QuizCreateWithoutQuestionsInput, QuizUncheckedCreateWithoutQuestionsInput>
    where?: QuizWhereInput
  }

  export type QuizUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: QuizWhereInput
    data: XOR<QuizUpdateWithoutQuestionsInput, QuizUncheckedUpdateWithoutQuestionsInput>
  }

  export type QuizUpdateWithoutQuestionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userQuestionAnswers?: UserQuestionAnswerUpdateManyWithoutQuizNestedInput
    userParticipateQuizzes?: UserParticipateQuizUpdateManyWithoutQuizNestedInput
    userQuizScores?: UserQuizScoreUpdateManyWithoutQuizNestedInput
    category?: CategoryUpdateOneRequiredWithoutQuizzesNestedInput
  }

  export type QuizUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userQuestionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuizNestedInput
    userParticipateQuizzes?: UserParticipateQuizUncheckedUpdateManyWithoutQuizNestedInput
    userQuizScores?: UserQuizScoreUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type QuestionCreateWithoutQuizInput = {
    question: string
    correctAnswer: string
    incorrectAnswers?: QuestionCreateincorrectAnswersInput | string[]
    createdAt?: Date | string
    userQuestionAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutQuizInput = {
    id?: number
    question: string
    correctAnswer: string
    incorrectAnswers?: QuestionCreateincorrectAnswersInput | string[]
    createdAt?: Date | string
    userQuestionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutQuizInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutQuizInput, QuestionUncheckedCreateWithoutQuizInput>
  }

  export type QuestionCreateManyQuizInputEnvelope = {
    data: QuestionCreateManyQuizInput | QuestionCreateManyQuizInput[]
    skipDuplicates?: boolean
  }

  export type UserQuestionAnswerCreateWithoutQuizInput = {
    answer: string
    isCorrect?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserQuestionAnswerInput
    question: QuestionCreateNestedOneWithoutUserQuestionAnswersInput
  }

  export type UserQuestionAnswerUncheckedCreateWithoutQuizInput = {
    id?: number
    userId: string
    questionId: number
    answer: string
    isCorrect?: boolean
    createdAt?: Date | string
  }

  export type UserQuestionAnswerCreateOrConnectWithoutQuizInput = {
    where: UserQuestionAnswerWhereUniqueInput
    create: XOR<UserQuestionAnswerCreateWithoutQuizInput, UserQuestionAnswerUncheckedCreateWithoutQuizInput>
  }

  export type UserQuestionAnswerCreateManyQuizInputEnvelope = {
    data: UserQuestionAnswerCreateManyQuizInput | UserQuestionAnswerCreateManyQuizInput[]
    skipDuplicates?: boolean
  }

  export type UserParticipateQuizCreateWithoutQuizInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserParticipateQuizInput
  }

  export type UserParticipateQuizUncheckedCreateWithoutQuizInput = {
    id?: number
    userId: string
    createdAt?: Date | string
  }

  export type UserParticipateQuizCreateOrConnectWithoutQuizInput = {
    where: UserParticipateQuizWhereUniqueInput
    create: XOR<UserParticipateQuizCreateWithoutQuizInput, UserParticipateQuizUncheckedCreateWithoutQuizInput>
  }

  export type UserParticipateQuizCreateManyQuizInputEnvelope = {
    data: UserParticipateQuizCreateManyQuizInput | UserParticipateQuizCreateManyQuizInput[]
    skipDuplicates?: boolean
  }

  export type UserQuizScoreCreateWithoutQuizInput = {
    score: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserQuizScoreInput
  }

  export type UserQuizScoreUncheckedCreateWithoutQuizInput = {
    id?: number
    userId: string
    score: number
    createdAt?: Date | string
  }

  export type UserQuizScoreCreateOrConnectWithoutQuizInput = {
    where: UserQuizScoreWhereUniqueInput
    create: XOR<UserQuizScoreCreateWithoutQuizInput, UserQuizScoreUncheckedCreateWithoutQuizInput>
  }

  export type UserQuizScoreCreateManyQuizInputEnvelope = {
    data: UserQuizScoreCreateManyQuizInput | UserQuizScoreCreateManyQuizInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutQuizzesInput = {
    id: number
    name: string
    createdAt?: Date | string
  }

  export type CategoryUncheckedCreateWithoutQuizzesInput = {
    id: number
    name: string
    createdAt?: Date | string
  }

  export type CategoryCreateOrConnectWithoutQuizzesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutQuizzesInput, CategoryUncheckedCreateWithoutQuizzesInput>
  }

  export type QuestionUpsertWithWhereUniqueWithoutQuizInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutQuizInput, QuestionUncheckedUpdateWithoutQuizInput>
    create: XOR<QuestionCreateWithoutQuizInput, QuestionUncheckedCreateWithoutQuizInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutQuizInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutQuizInput, QuestionUncheckedUpdateWithoutQuizInput>
  }

  export type QuestionUpdateManyWithWhereWithoutQuizInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutQuizInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    id?: IntFilter<"Question"> | number
    quizId?: IntNullableFilter<"Question"> | number | null
    question?: StringFilter<"Question"> | string
    correctAnswer?: StringFilter<"Question"> | string
    incorrectAnswers?: StringNullableListFilter<"Question">
    createdAt?: DateTimeFilter<"Question"> | Date | string
  }

  export type UserQuestionAnswerUpsertWithWhereUniqueWithoutQuizInput = {
    where: UserQuestionAnswerWhereUniqueInput
    update: XOR<UserQuestionAnswerUpdateWithoutQuizInput, UserQuestionAnswerUncheckedUpdateWithoutQuizInput>
    create: XOR<UserQuestionAnswerCreateWithoutQuizInput, UserQuestionAnswerUncheckedCreateWithoutQuizInput>
  }

  export type UserQuestionAnswerUpdateWithWhereUniqueWithoutQuizInput = {
    where: UserQuestionAnswerWhereUniqueInput
    data: XOR<UserQuestionAnswerUpdateWithoutQuizInput, UserQuestionAnswerUncheckedUpdateWithoutQuizInput>
  }

  export type UserQuestionAnswerUpdateManyWithWhereWithoutQuizInput = {
    where: UserQuestionAnswerScalarWhereInput
    data: XOR<UserQuestionAnswerUpdateManyMutationInput, UserQuestionAnswerUncheckedUpdateManyWithoutQuizInput>
  }

  export type UserParticipateQuizUpsertWithWhereUniqueWithoutQuizInput = {
    where: UserParticipateQuizWhereUniqueInput
    update: XOR<UserParticipateQuizUpdateWithoutQuizInput, UserParticipateQuizUncheckedUpdateWithoutQuizInput>
    create: XOR<UserParticipateQuizCreateWithoutQuizInput, UserParticipateQuizUncheckedCreateWithoutQuizInput>
  }

  export type UserParticipateQuizUpdateWithWhereUniqueWithoutQuizInput = {
    where: UserParticipateQuizWhereUniqueInput
    data: XOR<UserParticipateQuizUpdateWithoutQuizInput, UserParticipateQuizUncheckedUpdateWithoutQuizInput>
  }

  export type UserParticipateQuizUpdateManyWithWhereWithoutQuizInput = {
    where: UserParticipateQuizScalarWhereInput
    data: XOR<UserParticipateQuizUpdateManyMutationInput, UserParticipateQuizUncheckedUpdateManyWithoutQuizInput>
  }

  export type UserQuizScoreUpsertWithWhereUniqueWithoutQuizInput = {
    where: UserQuizScoreWhereUniqueInput
    update: XOR<UserQuizScoreUpdateWithoutQuizInput, UserQuizScoreUncheckedUpdateWithoutQuizInput>
    create: XOR<UserQuizScoreCreateWithoutQuizInput, UserQuizScoreUncheckedCreateWithoutQuizInput>
  }

  export type UserQuizScoreUpdateWithWhereUniqueWithoutQuizInput = {
    where: UserQuizScoreWhereUniqueInput
    data: XOR<UserQuizScoreUpdateWithoutQuizInput, UserQuizScoreUncheckedUpdateWithoutQuizInput>
  }

  export type UserQuizScoreUpdateManyWithWhereWithoutQuizInput = {
    where: UserQuizScoreScalarWhereInput
    data: XOR<UserQuizScoreUpdateManyMutationInput, UserQuizScoreUncheckedUpdateManyWithoutQuizInput>
  }

  export type CategoryUpsertWithoutQuizzesInput = {
    update: XOR<CategoryUpdateWithoutQuizzesInput, CategoryUncheckedUpdateWithoutQuizzesInput>
    create: XOR<CategoryCreateWithoutQuizzesInput, CategoryUncheckedCreateWithoutQuizzesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutQuizzesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutQuizzesInput, CategoryUncheckedUpdateWithoutQuizzesInput>
  }

  export type CategoryUpdateWithoutQuizzesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateWithoutQuizzesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutUserQuestionAnswerInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    username: string
    password: string
    avatar: string
    createdAt?: Date | string
    role?: $Enums.Role
    UserParticipateQuiz?: UserParticipateQuizCreateNestedManyWithoutUserInput
    UserQuizScore?: UserQuizScoreCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserQuestionAnswerInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    username: string
    password: string
    avatar: string
    createdAt?: Date | string
    role?: $Enums.Role
    UserParticipateQuiz?: UserParticipateQuizUncheckedCreateNestedManyWithoutUserInput
    UserQuizScore?: UserQuizScoreUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserQuestionAnswerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserQuestionAnswerInput, UserUncheckedCreateWithoutUserQuestionAnswerInput>
  }

  export type QuizCreateWithoutUserQuestionAnswersInput = {
    name: string
    type: $Enums.Type
    difficulty: $Enums.Difficulty
    startDate: string
    endDate: string
    createdAt?: Date | string
    questions?: QuestionCreateNestedManyWithoutQuizInput
    userParticipateQuizzes?: UserParticipateQuizCreateNestedManyWithoutQuizInput
    userQuizScores?: UserQuizScoreCreateNestedManyWithoutQuizInput
    category: CategoryCreateNestedOneWithoutQuizzesInput
  }

  export type QuizUncheckedCreateWithoutUserQuestionAnswersInput = {
    id?: number
    categoryId: number
    name: string
    type: $Enums.Type
    difficulty: $Enums.Difficulty
    startDate: string
    endDate: string
    createdAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutQuizInput
    userParticipateQuizzes?: UserParticipateQuizUncheckedCreateNestedManyWithoutQuizInput
    userQuizScores?: UserQuizScoreUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizCreateOrConnectWithoutUserQuestionAnswersInput = {
    where: QuizWhereUniqueInput
    create: XOR<QuizCreateWithoutUserQuestionAnswersInput, QuizUncheckedCreateWithoutUserQuestionAnswersInput>
  }

  export type QuestionCreateWithoutUserQuestionAnswersInput = {
    question: string
    correctAnswer: string
    incorrectAnswers?: QuestionCreateincorrectAnswersInput | string[]
    createdAt?: Date | string
    quiz?: QuizCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateWithoutUserQuestionAnswersInput = {
    id?: number
    quizId?: number | null
    question: string
    correctAnswer: string
    incorrectAnswers?: QuestionCreateincorrectAnswersInput | string[]
    createdAt?: Date | string
  }

  export type QuestionCreateOrConnectWithoutUserQuestionAnswersInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutUserQuestionAnswersInput, QuestionUncheckedCreateWithoutUserQuestionAnswersInput>
  }

  export type UserUpsertWithoutUserQuestionAnswerInput = {
    update: XOR<UserUpdateWithoutUserQuestionAnswerInput, UserUncheckedUpdateWithoutUserQuestionAnswerInput>
    create: XOR<UserCreateWithoutUserQuestionAnswerInput, UserUncheckedCreateWithoutUserQuestionAnswerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserQuestionAnswerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserQuestionAnswerInput, UserUncheckedUpdateWithoutUserQuestionAnswerInput>
  }

  export type UserUpdateWithoutUserQuestionAnswerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    UserParticipateQuiz?: UserParticipateQuizUpdateManyWithoutUserNestedInput
    UserQuizScore?: UserQuizScoreUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserQuestionAnswerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    UserParticipateQuiz?: UserParticipateQuizUncheckedUpdateManyWithoutUserNestedInput
    UserQuizScore?: UserQuizScoreUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QuizUpsertWithoutUserQuestionAnswersInput = {
    update: XOR<QuizUpdateWithoutUserQuestionAnswersInput, QuizUncheckedUpdateWithoutUserQuestionAnswersInput>
    create: XOR<QuizCreateWithoutUserQuestionAnswersInput, QuizUncheckedCreateWithoutUserQuestionAnswersInput>
    where?: QuizWhereInput
  }

  export type QuizUpdateToOneWithWhereWithoutUserQuestionAnswersInput = {
    where?: QuizWhereInput
    data: XOR<QuizUpdateWithoutUserQuestionAnswersInput, QuizUncheckedUpdateWithoutUserQuestionAnswersInput>
  }

  export type QuizUpdateWithoutUserQuestionAnswersInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUpdateManyWithoutQuizNestedInput
    userParticipateQuizzes?: UserParticipateQuizUpdateManyWithoutQuizNestedInput
    userQuizScores?: UserQuizScoreUpdateManyWithoutQuizNestedInput
    category?: CategoryUpdateOneRequiredWithoutQuizzesNestedInput
  }

  export type QuizUncheckedUpdateWithoutUserQuestionAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutQuizNestedInput
    userParticipateQuizzes?: UserParticipateQuizUncheckedUpdateManyWithoutQuizNestedInput
    userQuizScores?: UserQuizScoreUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type QuestionUpsertWithoutUserQuestionAnswersInput = {
    update: XOR<QuestionUpdateWithoutUserQuestionAnswersInput, QuestionUncheckedUpdateWithoutUserQuestionAnswersInput>
    create: XOR<QuestionCreateWithoutUserQuestionAnswersInput, QuestionUncheckedCreateWithoutUserQuestionAnswersInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutUserQuestionAnswersInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutUserQuestionAnswersInput, QuestionUncheckedUpdateWithoutUserQuestionAnswersInput>
  }

  export type QuestionUpdateWithoutUserQuestionAnswersInput = {
    question?: StringFieldUpdateOperationsInput | string
    correctAnswer?: StringFieldUpdateOperationsInput | string
    incorrectAnswers?: QuestionUpdateincorrectAnswersInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quiz?: QuizUpdateOneWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateWithoutUserQuestionAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizId?: NullableIntFieldUpdateOperationsInput | number | null
    question?: StringFieldUpdateOperationsInput | string
    correctAnswer?: StringFieldUpdateOperationsInput | string
    incorrectAnswers?: QuestionUpdateincorrectAnswersInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutUserParticipateQuizInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    username: string
    password: string
    avatar: string
    createdAt?: Date | string
    role?: $Enums.Role
    UserQuestionAnswer?: UserQuestionAnswerCreateNestedManyWithoutUserInput
    UserQuizScore?: UserQuizScoreCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserParticipateQuizInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    username: string
    password: string
    avatar: string
    createdAt?: Date | string
    role?: $Enums.Role
    UserQuestionAnswer?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput
    UserQuizScore?: UserQuizScoreUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserParticipateQuizInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserParticipateQuizInput, UserUncheckedCreateWithoutUserParticipateQuizInput>
  }

  export type QuizCreateWithoutUserParticipateQuizzesInput = {
    name: string
    type: $Enums.Type
    difficulty: $Enums.Difficulty
    startDate: string
    endDate: string
    createdAt?: Date | string
    questions?: QuestionCreateNestedManyWithoutQuizInput
    userQuestionAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuizInput
    userQuizScores?: UserQuizScoreCreateNestedManyWithoutQuizInput
    category: CategoryCreateNestedOneWithoutQuizzesInput
  }

  export type QuizUncheckedCreateWithoutUserParticipateQuizzesInput = {
    id?: number
    categoryId: number
    name: string
    type: $Enums.Type
    difficulty: $Enums.Difficulty
    startDate: string
    endDate: string
    createdAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutQuizInput
    userQuestionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuizInput
    userQuizScores?: UserQuizScoreUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizCreateOrConnectWithoutUserParticipateQuizzesInput = {
    where: QuizWhereUniqueInput
    create: XOR<QuizCreateWithoutUserParticipateQuizzesInput, QuizUncheckedCreateWithoutUserParticipateQuizzesInput>
  }

  export type UserUpsertWithoutUserParticipateQuizInput = {
    update: XOR<UserUpdateWithoutUserParticipateQuizInput, UserUncheckedUpdateWithoutUserParticipateQuizInput>
    create: XOR<UserCreateWithoutUserParticipateQuizInput, UserUncheckedCreateWithoutUserParticipateQuizInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserParticipateQuizInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserParticipateQuizInput, UserUncheckedUpdateWithoutUserParticipateQuizInput>
  }

  export type UserUpdateWithoutUserParticipateQuizInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    UserQuestionAnswer?: UserQuestionAnswerUpdateManyWithoutUserNestedInput
    UserQuizScore?: UserQuizScoreUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserParticipateQuizInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    UserQuestionAnswer?: UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
    UserQuizScore?: UserQuizScoreUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QuizUpsertWithoutUserParticipateQuizzesInput = {
    update: XOR<QuizUpdateWithoutUserParticipateQuizzesInput, QuizUncheckedUpdateWithoutUserParticipateQuizzesInput>
    create: XOR<QuizCreateWithoutUserParticipateQuizzesInput, QuizUncheckedCreateWithoutUserParticipateQuizzesInput>
    where?: QuizWhereInput
  }

  export type QuizUpdateToOneWithWhereWithoutUserParticipateQuizzesInput = {
    where?: QuizWhereInput
    data: XOR<QuizUpdateWithoutUserParticipateQuizzesInput, QuizUncheckedUpdateWithoutUserParticipateQuizzesInput>
  }

  export type QuizUpdateWithoutUserParticipateQuizzesInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUpdateManyWithoutQuizNestedInput
    userQuestionAnswers?: UserQuestionAnswerUpdateManyWithoutQuizNestedInput
    userQuizScores?: UserQuizScoreUpdateManyWithoutQuizNestedInput
    category?: CategoryUpdateOneRequiredWithoutQuizzesNestedInput
  }

  export type QuizUncheckedUpdateWithoutUserParticipateQuizzesInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutQuizNestedInput
    userQuestionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuizNestedInput
    userQuizScores?: UserQuizScoreUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type UserCreateWithoutUserQuizScoreInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    username: string
    password: string
    avatar: string
    createdAt?: Date | string
    role?: $Enums.Role
    UserQuestionAnswer?: UserQuestionAnswerCreateNestedManyWithoutUserInput
    UserParticipateQuiz?: UserParticipateQuizCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserQuizScoreInput = {
    id?: string
    email: string
    firstName: string
    lastName: string
    username: string
    password: string
    avatar: string
    createdAt?: Date | string
    role?: $Enums.Role
    UserQuestionAnswer?: UserQuestionAnswerUncheckedCreateNestedManyWithoutUserInput
    UserParticipateQuiz?: UserParticipateQuizUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserQuizScoreInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserQuizScoreInput, UserUncheckedCreateWithoutUserQuizScoreInput>
  }

  export type QuizCreateWithoutUserQuizScoresInput = {
    name: string
    type: $Enums.Type
    difficulty: $Enums.Difficulty
    startDate: string
    endDate: string
    createdAt?: Date | string
    questions?: QuestionCreateNestedManyWithoutQuizInput
    userQuestionAnswers?: UserQuestionAnswerCreateNestedManyWithoutQuizInput
    userParticipateQuizzes?: UserParticipateQuizCreateNestedManyWithoutQuizInput
    category: CategoryCreateNestedOneWithoutQuizzesInput
  }

  export type QuizUncheckedCreateWithoutUserQuizScoresInput = {
    id?: number
    categoryId: number
    name: string
    type: $Enums.Type
    difficulty: $Enums.Difficulty
    startDate: string
    endDate: string
    createdAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutQuizInput
    userQuestionAnswers?: UserQuestionAnswerUncheckedCreateNestedManyWithoutQuizInput
    userParticipateQuizzes?: UserParticipateQuizUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizCreateOrConnectWithoutUserQuizScoresInput = {
    where: QuizWhereUniqueInput
    create: XOR<QuizCreateWithoutUserQuizScoresInput, QuizUncheckedCreateWithoutUserQuizScoresInput>
  }

  export type UserUpsertWithoutUserQuizScoreInput = {
    update: XOR<UserUpdateWithoutUserQuizScoreInput, UserUncheckedUpdateWithoutUserQuizScoreInput>
    create: XOR<UserCreateWithoutUserQuizScoreInput, UserUncheckedCreateWithoutUserQuizScoreInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserQuizScoreInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserQuizScoreInput, UserUncheckedUpdateWithoutUserQuizScoreInput>
  }

  export type UserUpdateWithoutUserQuizScoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    UserQuestionAnswer?: UserQuestionAnswerUpdateManyWithoutUserNestedInput
    UserParticipateQuiz?: UserParticipateQuizUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserQuizScoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    UserQuestionAnswer?: UserQuestionAnswerUncheckedUpdateManyWithoutUserNestedInput
    UserParticipateQuiz?: UserParticipateQuizUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QuizUpsertWithoutUserQuizScoresInput = {
    update: XOR<QuizUpdateWithoutUserQuizScoresInput, QuizUncheckedUpdateWithoutUserQuizScoresInput>
    create: XOR<QuizCreateWithoutUserQuizScoresInput, QuizUncheckedCreateWithoutUserQuizScoresInput>
    where?: QuizWhereInput
  }

  export type QuizUpdateToOneWithWhereWithoutUserQuizScoresInput = {
    where?: QuizWhereInput
    data: XOR<QuizUpdateWithoutUserQuizScoresInput, QuizUncheckedUpdateWithoutUserQuizScoresInput>
  }

  export type QuizUpdateWithoutUserQuizScoresInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUpdateManyWithoutQuizNestedInput
    userQuestionAnswers?: UserQuestionAnswerUpdateManyWithoutQuizNestedInput
    userParticipateQuizzes?: UserParticipateQuizUpdateManyWithoutQuizNestedInput
    category?: CategoryUpdateOneRequiredWithoutQuizzesNestedInput
  }

  export type QuizUncheckedUpdateWithoutUserQuizScoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutQuizNestedInput
    userQuestionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuizNestedInput
    userParticipateQuizzes?: UserParticipateQuizUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type UserQuestionAnswerCreateManyUserInput = {
    id?: number
    quizId: number
    questionId: number
    answer: string
    isCorrect?: boolean
    createdAt?: Date | string
  }

  export type UserParticipateQuizCreateManyUserInput = {
    id?: number
    quizId: number
    createdAt?: Date | string
  }

  export type UserQuizScoreCreateManyUserInput = {
    id?: number
    quizId: number
    score: number
    createdAt?: Date | string
  }

  export type UserQuestionAnswerUpdateWithoutUserInput = {
    answer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quiz?: QuizUpdateOneRequiredWithoutUserQuestionAnswersNestedInput
    question?: QuestionUpdateOneRequiredWithoutUserQuestionAnswersNestedInput
  }

  export type UserQuestionAnswerUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserParticipateQuizUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quiz?: QuizUpdateOneRequiredWithoutUserParticipateQuizzesNestedInput
  }

  export type UserParticipateQuizUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserParticipateQuizUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuizScoreUpdateWithoutUserInput = {
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quiz?: QuizUpdateOneRequiredWithoutUserQuizScoresNestedInput
  }

  export type UserQuizScoreUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuizScoreUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizCreateManyCategoryInput = {
    id?: number
    name: string
    type: $Enums.Type
    difficulty: $Enums.Difficulty
    startDate: string
    endDate: string
    createdAt?: Date | string
  }

  export type QuizUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUpdateManyWithoutQuizNestedInput
    userQuestionAnswers?: UserQuestionAnswerUpdateManyWithoutQuizNestedInput
    userParticipateQuizzes?: UserParticipateQuizUpdateManyWithoutQuizNestedInput
    userQuizScores?: UserQuizScoreUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutQuizNestedInput
    userQuestionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuizNestedInput
    userParticipateQuizzes?: UserParticipateQuizUncheckedUpdateManyWithoutQuizNestedInput
    userQuizScores?: UserQuizScoreUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeFieldUpdateOperationsInput | $Enums.Type
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    startDate?: StringFieldUpdateOperationsInput | string
    endDate?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerCreateManyQuestionInput = {
    id?: number
    userId: string
    quizId: number
    answer: string
    isCorrect?: boolean
    createdAt?: Date | string
  }

  export type UserQuestionAnswerUpdateWithoutQuestionInput = {
    answer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserQuestionAnswerNestedInput
    quiz?: QuizUpdateOneRequiredWithoutUserQuestionAnswersNestedInput
  }

  export type UserQuestionAnswerUncheckedUpdateWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    quizId?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    quizId?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCreateManyQuizInput = {
    id?: number
    question: string
    correctAnswer: string
    incorrectAnswers?: QuestionCreateincorrectAnswersInput | string[]
    createdAt?: Date | string
  }

  export type UserQuestionAnswerCreateManyQuizInput = {
    id?: number
    userId: string
    questionId: number
    answer: string
    isCorrect?: boolean
    createdAt?: Date | string
  }

  export type UserParticipateQuizCreateManyQuizInput = {
    id?: number
    userId: string
    createdAt?: Date | string
  }

  export type UserQuizScoreCreateManyQuizInput = {
    id?: number
    userId: string
    score: number
    createdAt?: Date | string
  }

  export type QuestionUpdateWithoutQuizInput = {
    question?: StringFieldUpdateOperationsInput | string
    correctAnswer?: StringFieldUpdateOperationsInput | string
    incorrectAnswers?: QuestionUpdateincorrectAnswersInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userQuestionAnswers?: UserQuestionAnswerUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    correctAnswer?: StringFieldUpdateOperationsInput | string
    incorrectAnswers?: QuestionUpdateincorrectAnswersInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userQuestionAnswers?: UserQuestionAnswerUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    correctAnswer?: StringFieldUpdateOperationsInput | string
    incorrectAnswers?: QuestionUpdateincorrectAnswersInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerUpdateWithoutQuizInput = {
    answer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserQuestionAnswerNestedInput
    question?: QuestionUpdateOneRequiredWithoutUserQuestionAnswersNestedInput
  }

  export type UserQuestionAnswerUncheckedUpdateWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    questionId?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuestionAnswerUncheckedUpdateManyWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    questionId?: IntFieldUpdateOperationsInput | number
    answer?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserParticipateQuizUpdateWithoutQuizInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserParticipateQuizNestedInput
  }

  export type UserParticipateQuizUncheckedUpdateWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserParticipateQuizUncheckedUpdateManyWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuizScoreUpdateWithoutQuizInput = {
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserQuizScoreNestedInput
  }

  export type UserQuizScoreUncheckedUpdateWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserQuizScoreUncheckedUpdateManyWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionCountOutputTypeDefaultArgs instead
     */
    export type QuestionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuizCountOutputTypeDefaultArgs instead
     */
    export type QuizCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuizCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionDefaultArgs instead
     */
    export type QuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuizDefaultArgs instead
     */
    export type QuizArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuizDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserQuestionAnswerDefaultArgs instead
     */
    export type UserQuestionAnswerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserQuestionAnswerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserParticipateQuizDefaultArgs instead
     */
    export type UserParticipateQuizArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserParticipateQuizDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserQuizScoreDefaultArgs instead
     */
    export type UserQuizScoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserQuizScoreDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}